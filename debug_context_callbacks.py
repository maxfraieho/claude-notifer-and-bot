#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
"""

import os
import sys
import asyncio
from unittest.mock import Mock, AsyncMock

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))


class MockTelegramQuery:
    """Mock –¥–ª—è callback query"""
    def __init__(self, data):
        self.data = data
        self.from_user = Mock()
        self.from_user.id = 12345
        self.message = AsyncMock()
        self.edit_message_text = AsyncMock()
        self.answer = AsyncMock()


class MockTelegramUpdate:
    """Mock –¥–ª—è Update –∑ callback query"""
    def __init__(self, callback_data):
        self.callback_query = MockTelegramQuery(callback_data)
        self.effective_user = Mock()
        self.effective_user.id = 12345


class MockTelegramContext:
    """Mock –¥–ª—è Context"""
    def __init__(self, has_context_commands=True):
        self.bot_data = {}

        if has_context_commands:
            # –°—Ç–≤–æ—Ä—é—î–º–æ mock context_commands
            from src.bot.features.context_commands import ContextCommands
            from src.storage.facade import Storage
            from src.claude.context_memory import ContextMemoryManager

            mock_storage = Mock(spec=Storage)
            mock_context_memory = Mock(spec=ContextMemoryManager)

            self.bot_data["context_commands"] = ContextCommands(mock_storage, mock_context_memory)


async def test_callback_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ callback –∑–∞–ø–∏—Ç—ñ–≤"""

    print("üîç –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")

    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ callback'—ñ–≤
    from src.bot.handlers.callback import handle_callback_query

    # –¢–µ—Å—Ç 1: context_commands —î –≤ bot_data
    print("\nüìù –¢–µ—Å—Ç 1: context_commands –¥–æ—Å—Ç—É–ø–Ω—ñ")
    update = MockTelegramUpdate("context_export")
    context = MockTelegramContext(has_context_commands=True)

    try:
        await handle_callback_query(update, context)
        print("‚úÖ Callback –æ–±—Ä–æ–±–ª–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ answer()
        if update.callback_query.answer.called:
            print("‚úÖ callback_query.answer() –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
        else:
            print("‚ùå callback_query.answer() –ù–ï –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback: {e}")

    # –¢–µ—Å—Ç 2: context_commands –ù–ï —î –≤ bot_data
    print("\nüìù –¢–µ—Å—Ç 2: context_commands –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
    update = MockTelegramUpdate("context_export")
    context = MockTelegramContext(has_context_commands=False)

    try:
        await handle_callback_query(update, context)
        print("‚úÖ Callback –æ–±—Ä–æ–±–ª–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if update.callback_query.edit_message_text.called:
            call_args = update.callback_query.edit_message_text.call_args[0][0]
            if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in call_args:
                print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å")
            else:
                print(f"‚ùì –ü–æ–∫–∞–∑–∞–Ω–æ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {call_args}")
        else:
            print("‚ùå –ù–ï –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback: {e}")

    # –¢–µ—Å—Ç 3: –Ü–Ω—à—ñ —Ç–∏–ø–∏ callback'—ñ–≤
    print("\nüìù –¢–µ—Å—Ç 3: –ù–µ–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ callback'—ñ")
    update = MockTelegramUpdate("action:status")
    context = MockTelegramContext(has_context_commands=True)

    try:
        await handle_callback_query(update, context)
        print("‚úÖ –ù–µ–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π callback –æ–±—Ä–æ–±–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–µ–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ callback: {e}")

    print("\nüéØ –í–ò–°–ù–û–í–û–ö:")
    print("–ú–µ—Ö–∞–Ω—ñ–∑–º –æ–±—Ä–æ–±–∫–∏ callback'—ñ–≤ –ø—Ä–∞—Ü—é—î –Ω–∞ —Ä—ñ–≤–Ω—ñ –∫–æ–¥—É.")
    print("–Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–µ–∞–≥—É—é—Ç—å - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤:")
    print("1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó context_commands –≤ bot_data")
    print("2. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó CallbackQueryHandler")
    print("3. –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∞—Ö middleware")


async def main():
    await test_callback_handling()


if __name__ == "__main__":
    asyncio.run(main())