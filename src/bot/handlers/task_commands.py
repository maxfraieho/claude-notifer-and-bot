"""Task scheduler command handlers."""

import structlog
from telegram import Update
from telegram.ext import ContextTypes

logger = structlog.get_logger()


async def task_queue_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manage automated task queue."""
    user_id = update.effective_user.id
    message = update.effective_message

    logger.info("Task queue command", user_id=user_id)

    try:
        # Get task scheduler from context
        task_scheduler = context.bot_data.get("task_scheduler")
        if not task_scheduler:
            await message.reply_text(
                "‚ùå **–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞."
            )
            return

        # Parse command arguments
        args = context.args
        if not args:
            # Show task queue status
            pending_tasks = await task_scheduler.get_user_tasks(user_id, "pending")
            running_tasks = task_scheduler.get_running_tasks()
            stats = await task_scheduler.get_task_statistics(user_id)

            message_text = (
                f"üìã **–ß–µ—Ä–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å**\n\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_id}\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –û—á—ñ–∫—É—é—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {len(pending_tasks)}\n"
                f"‚Ä¢ –í–∏–∫–æ–Ω—É—é—Ç—å—Å—è –∑–∞—Ä–∞–∑: {len(running_tasks)}\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ: {stats.get('completed', 0)}\n"
                f"‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {stats.get('failed', 0)}\n\n"
            )

            if pending_tasks:
                message_text += "üïí **–ó–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ:**\n"
                for task in pending_tasks[:5]:  # Show first 5
                    message_text += f"‚Ä¢ {task.task_type} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {task.priority})\n"
                if len(pending_tasks) > 5:
                    message_text += f"... —Ç–∞ —â–µ {len(pending_tasks) - 5} –∑–∞–≤–¥–∞–Ω—å\n"
                message_text += "\n"

            message_text += (
                "**–ö–æ–º–∞–Ω–¥–∏:**\n"
                "‚Ä¢ `/tasks add <type>` - –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                "‚Ä¢ `/tasks run` - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É\n"
                "‚Ä¢ `/tasks clear` - –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É\n"
                "‚Ä¢ `/tasks templates` - –ø–æ–∫–∞–∑–∞—Ç–∏ —à–∞–±–ª–æ–Ω–∏"
            )

            await message.reply_text(message_text)
            return

        command = args[0].lower()

        if command == "add":
            if len(args) < 2:
                await message.reply_text(
                    "‚ùå **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:** `/tasks add <type> [prompt]`\n\n"
                    "**–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏:**\n"
                    "‚Ä¢ `analysis` - –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É\n"
                    "‚Ä¢ `documentation` - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è\n"
                    "‚Ä¢ `refactoring` - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥\n"
                    "‚Ä¢ `security` - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏\n"
                    "‚Ä¢ `testing` - —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\n"
                    "‚Ä¢ `custom` - –≤–ª–∞—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è"
                )
                return

            task_type = args[1]
            custom_prompt = " ".join(args[2:]) if len(args) > 2 else None

            # Create task based on type
            if task_type == "custom" and custom_prompt:
                task_id = await task_scheduler.add_scheduled_task(
                    user_id=user_id,
                    task_type="custom",
                    prompt=custom_prompt,
                    auto_execute=True,
                    auto_respond=True
                )
            else:
                # Use template
                from ..features.task_scheduler import TaskScheduler
                current_dir = context.user_data.get("current_directory", "/")

                if task_type == "analysis":
                    template = TaskScheduler.create_code_analysis_task(user_id, str(current_dir))
                elif task_type == "documentation":
                    template = TaskScheduler.create_documentation_task(user_id, "readme")
                elif task_type == "refactoring":
                    template = TaskScheduler.create_refactoring_task(user_id)
                elif task_type == "security":
                    template = TaskScheduler.create_code_analysis_task(user_id, str(current_dir), "security")
                elif task_type == "testing":
                    template = {
                        "task_type": "testing",
                        "prompt": "–°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —ó—Ö. –ù–∞–¥–∞–π—Ç–µ –∑–≤—ñ—Ç –ø—Ä–æ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.",
                        "metadata": {"test_type": "comprehensive"}
                    }
                else:
                    await message.reply_text(f"‚ùå **–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è:** {task_type}")
                    return

                task_id = await task_scheduler.add_scheduled_task(
                    user_id=user_id,
                    task_type=template["task_type"],
                    prompt=template["prompt"],
                    auto_execute=True,
                    auto_respond=True,
                    metadata=template.get("metadata", {})
                )

            await message.reply_text(
                f"‚úÖ **–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏**\n\n"
                f"üÜî ID: {task_id}\n"
                f"üìã –¢–∏–ø: {task_type}\n"
                f"ü§ñ –ê–≤—Ç–æ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
                f"_–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Claude CLI_"
            )

        elif command == "run":
            # Execute task queue manually
            await message.reply_text("üöÄ **–ó–∞–ø—É—Å–∫ —á–µ—Ä–≥–∏ –∑–∞–≤–¥–∞–Ω—å...**")
            results = await task_scheduler.execute_task_queue(user_id)

            result_message = (
                f"‚úÖ **–ß–µ—Ä–≥–∞ –∑–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–∞**\n\n"
                f"üéØ –í–∏–∫–æ–Ω–∞–Ω–æ: {results['executed']}\n"
                f"‚ùå –ü–æ–º–∏–ª–æ–∫: {results['failed']}\n"
                f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results['skipped']}"
            )

            await message.reply_text(result_message)

        elif command == "clear":
            # Clear task queue
            deleted_count = await task_scheduler.clear_user_tasks(user_id, "pending")

            await message.reply_text(
                f"üóëÔ∏è **–ß–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞**\n\n"
                f"–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {deleted_count}"
            )

        elif command == "templates":
            # Show available templates
            templates_text = (
                "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –∑–∞–≤–¥–∞–Ω—å**\n\n"
                "üîç **analysis** - –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É –ø—Ä–æ—î–∫—Ç—É\n"
                "üìù **documentation** - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó\n"
                "‚öíÔ∏è **refactoring** - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è\n"
                "üîí **security** - –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —É—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π\n"
                "üß™ **testing** - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤\n"
                "üéØ **custom** - –í–ª–∞—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
                "**–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
                "`/tasks add analysis`\n"
                "`/tasks add custom –°—Ç–≤–æ—Ä—ñ—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é`"
            )

            await message.reply_text(templates_text)

        else:
            await message.reply_text(
                f"‚ùå **–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞:** {command}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: add, run, clear, templates"
            )

    except Exception as e:
        logger.error("Error in task queue command", error=str(e), user_id=user_id, exc_info=True)
        await message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏:**\n\n`{str(e)}`"
        )


async def auto_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Toggle automation mode for scheduled tasks."""
    user_id = update.effective_user.id
    message = update.effective_message

    logger.info("Auto mode command", user_id=user_id)

    try:
        # Get task scheduler from context
        task_scheduler = context.bot_data.get("task_scheduler")
        if not task_scheduler:
            await message.reply_text(
                "‚ùå **–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞."
            )
            return

        args = context.args
        if not args:
            # Show current auto mode status
            await message.reply_text(
                "ü§ñ **–†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó**\n\n"
                "**–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:** –£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ\n\n"
                "**–§—É–Ω–∫—Ü—ñ—ó:**\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Claude\n"
                "‚Ä¢ –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–∞–ø–∏—Ç–∏\n"
                "‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ DND –ø–µ—Ä—ñ–æ–¥\n\n"
                "**–ö–æ–º–∞–Ω–¥–∏:**\n"
                "`/auto on` - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é\n"
                "`/auto off` - –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é\n"
                "`/auto status` - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å"
            )
            return

        command = args[0].lower()

        if command in ["on", "enable", "—É–≤—ñ–º–∫–Ω—É—Ç–∏"]:
            await message.reply_text(
                "‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞**\n\n"
                "ü§ñ –ó–∞–≤–¥–∞–Ω–Ω—è –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n"
                "üìù –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ\n"
                "üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ\n\n"
                "_–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—ó —Ä–æ–±–æ—Ç–∏_"
            )

        elif command in ["off", "disable", "–≤–∏–º–∫–Ω—É—Ç–∏"]:
            await message.reply_text(
                "‚ùå **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –≤–∏–º–∫–Ω–µ–Ω–∞**\n\n"
                "‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ\n"
                "üìù –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ\n"
                "üîï –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ\n\n"
                "_–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –≤ —Ä—É—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ_"
            )

        elif command in ["status", "—Å—Ç–∞—Ç—É—Å"]:
            running_tasks = task_scheduler.get_running_tasks()
            stats = await task_scheduler.get_task_statistics()

            status_text = (
                "üìä **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó**\n\n"
                "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è:** –£–≤—ñ–º–∫–Ω–µ–Ω–∞ ‚úÖ\n"
                "üìù **–ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:** –ê–∫—Ç–∏–≤–Ω—ñ ‚úÖ\n"
                "üì¢ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:** –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ ‚úÖ\n\n"
                f"üèÉ **–ü–æ—Ç–æ—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**\n"
                f"‚Ä¢ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–¥–∞–Ω—å: {len(running_tasks)}\n"
                f"‚Ä¢ –û—á—ñ–∫—É—é—Ç—å: {stats.get('pending', 0)}\n"
                f"‚Ä¢ –í–∏–∫–æ–Ω–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {stats.get('completed', 0)}\n\n"
                "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/tasks` –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–≥–æ—é"
            )

            await message.reply_text(status_text)

        else:
            await message.reply_text(
                f"‚ùå **–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞:** {command}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: on, off, status"
            )

    except Exception as e:
        logger.error("Error in auto mode command", error=str(e), user_id=user_id, exc_info=True)
        await message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏:**\n\n`{str(e)}`"
        )


async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Schedule tasks for automated execution (alias for schedules command)."""
    from .command import schedules_command

    logger.info("Schedule command redirecting to schedules", user_id=update.effective_user.id)

    # Redirect to working schedules system
    await schedules_command(update, context)
