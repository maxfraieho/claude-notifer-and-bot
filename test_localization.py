#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
"""

import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/home/vokov/projects/claude-notifer-and-bot/src')

from localization.wrapper import t, get_locale_for_user
from localization.i18n import i18n

class MockContext:
    def __init__(self):
        self.bot_data = {}
        self.user_data = {"_telegram_language_code": "uk"}

async def test_restart_localization():
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É...")

    context = MockContext()
    user_id = 6412868393

    try:
        # –¢–µ—Å—Ç –∫–ª—é—á—ñ–≤, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –∫–æ–¥—ñ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        welcome_text = await t(context, user_id, "commands.start.welcome", name="–í–æ–ª–æ–¥–∏–º–∏—Ä")
        restarted_text = await t(context, user_id, "commands.restart.completed")

        new_session_btn = await t(context, user_id, "buttons.new_session")
        continue_btn = await t(context, user_id, "buttons.continue_session")
        status_btn = await t(context, user_id, "buttons.check_status")
        context_btn = await t(context, user_id, "buttons.context")
        settings_btn = await t(context, user_id, "buttons.settings")
        help_btn = await t(context, user_id, "buttons.get_help")
        lang_btn = await t(context, user_id, "buttons.language_settings")

        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó:")
        print(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {welcome_text}")
        print(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: {restarted_text}")
        print("\nüì± –ö–Ω–æ–ø–∫–∏:")
        print(f"‚Ä¢ –ù–æ–≤–∞ —Å–µ—Å—ñ—è: {new_session_btn}")
        print(f"‚Ä¢ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏: {continue_btn}")
        print(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_btn}")
        print(f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_btn}")
        print(f"‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {settings_btn}")
        print(f"‚Ä¢ –î–æ–ø–æ–º–æ–≥–∞: {help_btn}")
        print(f"‚Ä¢ –ú–æ–≤–∞: {lang_btn}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –∫–ª—é—á—ñ –∑–∞–º—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É
        issues = []
        if "commands.start.welcome" in welcome_text:
            issues.append("‚ùå welcome_text –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á")
        if "commands.restart.completed" in restarted_text:
            issues.append("‚ùå restarted_text –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á")
        if "buttons." in new_session_btn:
            issues.append("‚ùå buttons –º—ñ—Å—Ç—è—Ç—å –∫–ª—é—á—ñ")

        if issues:
            print(f"\nüö® –ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:")
            for issue in issues:
                print(f"  {issue}")
        else:
            print(f"\nüéâ –í—Å—ñ —Ç–µ–∫—Å—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

        return len(issues) == 0

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_restart_localization())
    sys.exit(0 if success else 1)