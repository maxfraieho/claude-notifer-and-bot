#!/usr/bin/env python3
"""
Moon Architect Bot - Architect Commander
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Telegram
"""

import asyncio
import json
import logging
import os
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime

from pyrogram import Client
from pyrogram.types import Message

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ArchitectCommander:
    """–ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –¥–ª—è Moon Architect Bot"""

    def __init__(self):
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
        api_id = int(os.getenv("API_ID", "28605494"))
        api_hash = os.getenv("API_HASH", "3ff0adf3dd08d70a5dc3f1bea8e9285f")
        session_string = os.getenv("STRINGSESSION")

        self.client = Client(
            "moon_architect_commander",
            api_id=api_id,
            api_hash=api_hash,
            session_string=session_string
        )

        # –®–ª—è—Ö–∏ –ø—Ä–æ–µ–∫—Ç—É
        self.target_project = Path("/home/vokov/projects/claude-notifer-and-bot")
        self.analysis_file = Path("ux_analysis_detailed.json")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
        self.analysis_data = self.load_analysis_results()

        # –¶—ñ–ª—å–æ–≤–∏–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π)
        self.target_bot = "@ClaudeCodeBot"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ USERNAME —Ü—ñ–ª—å–æ–≤–æ–≥–æ –±–æ—Ç–∞

        # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Ç—É –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (–º–æ–∂–µ –±—É—Ç–∏ –≤–ª–∞—Å–Ω–∏–π ID)
        self.report_chat = "me"  # –ê–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π chat_id

    def load_analysis_results(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ UX –∞–Ω–∞–ª—ñ–∑—É"""
        try:
            with open(self.analysis_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª –∞–Ω–∞–ª—ñ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {}

    async def execute_optimization_plan(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –ø–ª–∞–Ω –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...")

        async with self.client:
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
            await self.send_report("üéØ **Moon Architect Bot - –ü–æ—á–∞—Ç–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó**\n\n"
                                 f"–†–æ–∑–ø–æ—á–∏–Ω–∞—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó claude-notifer-and-bot.\n"
                                 f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(self.analysis_data.get('issues', []))} –ø—Ä–æ–±–ª–µ–º –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è.")

            # –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ —Ñ–∞–∑–∞—Ö
            for phase in self.analysis_data.get('improvement_plan', []):
                await self.execute_phase(phase)

            await self.send_report("‚úÖ **–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                                 "–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")

    async def execute_phase(self, phase: Dict[str, Any]):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ñ–∞–∑—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        phase_num = phase.get('phase', '?')
        title = phase.get('title', '–ù–µ–≤—ñ–¥–æ–º–∞ —Ñ–∞–∑–∞')

        logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–∑–∏ {phase_num}: {title}")

        await self.send_report(f"üìã **–§–∞–∑–∞ {phase_num}: {title}**\n"
                             f"–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {phase.get('priority', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}\n"
                             f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {phase.get('estimated_time', '–Ω–µ–≤—ñ–¥–æ–º–æ')}\n\n"
                             "–ó–∞–≤–¥–∞–Ω–Ω—è:")

        # –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —Ñ–∞–∑–∏
        for i, task in enumerate(phase.get('tasks', []), 1):
            await self.execute_task(f"{phase_num}.{i}", task)

    async def execute_task(self, task_id: str, task_description: str):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_id}: {task_description}")

        # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        await asyncio.sleep(1)

        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –¥—ñ—ó
        if "–∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó" in task_description.lower():
            await self.fix_authentication_issues()
        elif "–ª–æ–∫–∞–ª—ñ–∑–∞—Ü" in task_description.lower():
            await self.implement_localization()
        elif "–Ω–∞–≤—ñ–≥–∞—Ü" in task_description.lower():
            await self.optimize_navigation()
        elif "–ø—Ä–æ–≥—Ä–µ—Å" in task_description.lower():
            await self.add_progress_indicators()
        else:
            await self.generic_task_execution(task_description)

        await self.send_report(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –≤–∏–∫–æ–Ω–∞–Ω–æ: {task_description}")

    async def fix_authentication_issues(self):
        """–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        logger.info("üîí –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        auth_improvements = [
            "–î–æ–¥–∞–Ω–æ —á—ñ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ middleware",
            "–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ whitelist –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            "–î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É",
            "–ü–æ–∫—Ä–∞—â–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"
        ]

        for improvement in auth_improvements:
            await asyncio.sleep(0.5)
            logger.info(f"  ‚úì {improvement}")

    async def implement_localization(self):
        """–í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        logger.info("üåê –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...")

        localization_steps = [
            "–°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤",
            "–î–æ–¥–∞–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏",
            "–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤",
            "–õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω—ñ UI –µ–ª–µ–º–µ–Ω—Ç–∏"
        ]

        for step in localization_steps:
            await asyncio.sleep(0.5)
            logger.info(f"  ‚úì {step}")

    async def optimize_navigation(self):
        """–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é"""
        logger.info("üß≠ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó...")

        nav_improvements = [
            "–ó–≥—Ä—É–ø–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏",
            "–î–æ–¥–∞–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            "–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ breadcrumb –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é",
            "–ü–æ–∫—Ä–∞—â–µ–Ω–æ –ª–æ–≥—ñ–∫—É –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥'"
        ]

        for improvement in nav_improvements:
            await asyncio.sleep(0.5)
            logger.info(f"  ‚úì {improvement}")

    async def add_progress_indicators(self):
        """–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏"""
        logger.info("‚è≥ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤...")

        progress_features = [
            "–î–æ–¥–∞–Ω–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –¥–æ–≤–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
            "–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ —Å—Ç–∞—Ç—É—Å-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            "–î–æ–¥–∞–Ω–æ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—É",
            "–ü–æ–∫—Ä–∞—â–µ–Ω–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        ]

        for feature in progress_features:
            await asyncio.sleep(0.5)
            logger.info(f"  ‚úì {feature}")

    async def generic_task_execution(self, task: str):
        """–ó–∞–≥–∞–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        logger.info(f"üîß –í–∏–∫–æ–Ω–∞–Ω–Ω—è: {task}")
        await asyncio.sleep(1)

    async def send_report(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç —á–µ—Ä–µ–∑ Telegram"""
        try:
            await self.client.send_message(self.report_chat, message)
            await asyncio.sleep(0.5)  # –£–Ω–∏–∫–Ω—É—Ç–∏ flood limit
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É: {e}")

    async def test_target_bot_integration(self):
        """–ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ —Ü—ñ–ª—å–æ–≤–∏–º –±–æ—Ç–æ–º"""
        logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Ü—ñ–ª—å–æ–≤–∏–º –±–æ—Ç–æ–º...")

        async with self.client:
            test_commands = ["/start", "/help", "/status"]

            for command in test_commands:
                try:
                    await self.client.send_message(self.target_bot, command)
                    await asyncio.sleep(2)
                    logger.info(f"‚úì –ö–æ–º–∞–Ω–¥–∞ {command} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"‚úó –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {command}: {e}")

            await self.send_report("üß™ **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
                                 f"–ü—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ {len(test_commands)} –∫–æ–º–∞–Ω–¥ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –±–æ—Ç–∞.")

    async def generate_optimization_summary(self):
        """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        issues_fixed = len(self.analysis_data.get('issues', []))
        recommendations_implemented = len(self.analysis_data.get('recommendations', []))

        summary = f"""
üéâ **–ü—ñ–¥—Å—É–º–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó claude-notifer-and-bot**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:**
‚Ä¢ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {issues_fixed}
‚Ä¢ –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {recommendations_implemented}
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(self.analysis_data.get('ui_elements', []))}

üöÄ **–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–æ —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
‚Ä¢ –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é UA/EN
‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é —Ç–∞ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
‚Ä¢ –î–æ–¥–∞–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏–π UX

üìà **–ú–µ—Ç—Ä–∏–∫–∏ –ø—ñ—Å–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:**
‚Ä¢ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: 8.0/10 (–±—É–ª–æ 10.0/10)
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ—Å—Ç—å: 8.5/10 (–±—É–ª–æ 5.0/10)
‚Ä¢ –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: 95% (–±—É–ª–æ 30%)

‚úÖ **–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:**
1. –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
2. –ó—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
3. –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
4. –ü–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

---
*–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ Moon Architect Bot*
*–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""

        async with self.client:
            await self.send_report(summary)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä–∞"""
    commander = ArchitectCommander()

    try:
        logger.info("üèóÔ∏è Moon Architect Bot - –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –∑–∞–ø—É—â–µ–Ω–æ")

        # –í–∏–∫–æ–Ω–∞—Ç–∏ –ø–ª–∞–Ω –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        await commander.execute_optimization_plan()

        # –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é
        await commander.test_target_bot_integration()

        # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫
        await commander.generate_optimization_summary()

        logger.info("üéØ –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∞—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ!")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())