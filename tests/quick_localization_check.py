#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
–ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
"""

import os
import re
import json
from pathlib import Path


def check_hardcoded_ui_elements():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ hardcoded UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ hardcoded UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...")

    project_root = Path(__file__).parent.parent
    critical_files = [
        project_root / "src" / "bot" / "handlers" / "dnd_prompts.py",
        project_root / "src" / "bot" / "handlers" / "command.py",
        project_root / "src" / "bot" / "handlers" / "callback.py"
    ]

    # –ù–µ–±–µ–∑–ø–µ—á–Ω—ñ patterns –¥–ª—è –∫–Ω–æ–ø–æ–∫
    dangerous_patterns = [
        r'InlineKeyboardButton\(\s*["\']([^"\']*[üîßüìäüîÑüìùüìãüîô‚ûï‚öôÔ∏èüåô‚ö°üìÅüÜïüíæ‚ùìüè†üåê‚¨ÜÔ∏è]+[^"\']*)["\']',
        r'InlineKeyboardButton\(\s*["\']([^"\']*(?:–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è|Settings|–°—Ç–≤–æ—Ä–∏—Ç–∏|Create|–î–æ–¥–∞—Ç–∏|Add|–†–µ–¥–∞–≥—É–≤–∞—Ç–∏|Edit)[^"\']*)["\']',
    ]

    violations = []

    for file_path in critical_files:
        if not file_path.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {file_path.name}")
            continue

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            for line_num, line in enumerate(content.split('\n'), 1):
                # Skip —è–∫—â–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
                if 'await t(' in line or 'get_localized_text' in line:
                    continue

                for pattern in dangerous_patterns:
                    matches = re.finditer(pattern, line)
                    for match in matches:
                        violations.append({
                            'file': str(file_path.name),
                            'line': line_num,
                            'text': match.group(1),
                            'severity': 'CRITICAL'
                        })

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É {file_path.name}: {e}")
            continue

    if violations:
        print(f"‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ {len(violations)} hardcoded UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:")
        for v in violations:
            print(f"   {v['file']}:{v['line']} - '{v['text']}'")
        return False
    else:
        print("‚úÖ Hardcoded UI –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª–∞—Ö!")
        return True


def check_translation_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    print("\nüåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")

    project_root = Path(__file__).parent.parent
    translations_dir = project_root / "src" / "localization" / "translations"

    if not translations_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–µ —ñ—Å–Ω—É—î!")
        return False

    required_files = ["uk.json", "en.json"]
    all_good = True

    for file_name in required_files:
        file_path = translations_dir / file_name
        if not file_path.exists():
            print(f"‚ùå –§–∞–π–ª –ø–µ—Ä–µ–∫–ª–∞–¥—É {file_name} –Ω–µ —ñ—Å–Ω—É—î!")
            all_good = False
        else:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    print(f"‚úÖ {file_name} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π JSON")
            except Exception as e:
                print(f"‚ùå {file_name} - –ø–æ–º–∏–ª–∫–∞ JSON: {e}")
                all_good = False

    return all_good


def check_critical_localization_keys():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
    print("\nüîë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...")

    project_root = Path(__file__).parent.parent
    uk_file = project_root / "src" / "localization" / "translations" / "uk.json"

    if not uk_file.exists():
        print("‚ùå –§–∞–π–ª UK –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ —ñ—Å–Ω—É—î!")
        return False

    try:
        with open(uk_file, 'r', encoding='utf-8') as f:
            uk_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è UK —Ñ–∞–π–ª—É: {e}")
        return False

    # –ö—Ä–∏—Ç–∏—á–Ω—ñ –∫–ª—é—á—ñ —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –ø—ñ—Å–ª—è –Ω–∞—à–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
    critical_keys = [
        ("buttons", "new_session"),
        ("buttons", "continue"),
        ("buttons", "settings"),
        ("buttons", "create_prompt"),
        ("buttons", "prompts_list"),
        ("buttons", "go_up"),
        ("buttons", "refresh"),
        ("buttons", "projects")
    ]

    missing_keys = []
    for section, key in critical_keys:
        if section not in uk_data:
            missing_keys.append(f"{section} (section)")
        elif key not in uk_data[section]:
            missing_keys.append(f"{section}.{key}")

    if missing_keys:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∫–ª—é—á—ñ: {missing_keys}")
        return False
    else:
        print("‚úÖ –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∫–ª—é—á—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ!")
        return True


def check_localization_imports():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö imports"""
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö imports...")

    project_root = Path(__file__).parent.parent
    handler_files = [
        project_root / "src" / "bot" / "handlers" / "dnd_prompts.py",
        project_root / "src" / "bot" / "handlers" / "command.py"
    ]

    missing_imports = []

    for file_path in handler_files:
        if not file_path.exists():
            continue

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ imports
            has_localization_import = (
                'from ...localization.util import' in content or
                'from ..localization.util import' in content
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ñ–∞–π–ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î InlineKeyboardButton
            uses_keyboard = 'InlineKeyboardButton(' in content

            if uses_keyboard and not has_localization_import:
                missing_imports.append(file_path.name)

        except Exception:
            continue

    if missing_imports:
        print(f"‚ùå –§–∞–π–ª–∏ –±–µ–∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö imports: {missing_imports}")
        return False
    else:
        print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ imports!")
        return True


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...\n")

    tests = [
        check_translation_files,
        check_critical_localization_keys,
        check_localization_imports,
        check_hardcoded_ui_elements
    ]

    results = []
    for test in tests:
        results.append(test())

    print("\n" + "="*50)
    passed = sum(results)
    total = len(results)

    if passed == total:
        print(f"üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! ({passed}/{total})")
        print("‚úÖ –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ –≤—ñ–¥–º—ñ–Ω–Ω–æ–º—É —Å—Ç–∞–Ω—ñ!")
        return 0
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{total} —Ç–µ—Å—Ç—ñ–≤")
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è!")
        return 1


if __name__ == "__main__":
    exit(main())