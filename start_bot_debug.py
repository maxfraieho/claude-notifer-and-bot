#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º debug —Ä–µ–∂–∏–º–æ–º –¥–ª—è callback'—ñ–≤
"""

import os
import sys
import asyncio
import logging
import structlog

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('callback_debug.log', mode='w')
    ]
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è structlog
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ debug –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""

    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç –∑ debug –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –¥–ª—è callback'—ñ–≤...")
    print("üìÅ –õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ callback_debug.log")
    print("üîç –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ callback'–∞–º–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É")
    print("=" * 60)

    from src.main import main as bot_main

    # –ü–∞—Ç—á –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è callback'—ñ–≤
    original_handle_callback_query = None

    try:
        from src.bot.handlers import callback
        original_handle_callback_query = callback.handle_callback_query

        async def debug_handle_callback_query(update, context):
            """–û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
            logger = structlog.get_logger("CALLBACK_DEBUG")

            callback_data = update.callback_query.data if update.callback_query else "No data"
            user_id = update.effective_user.id if update.effective_user else "Unknown"

            logger.info("üîî CALLBACK RECEIVED",
                       callback_data=callback_data,
                       user_id=user_id)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            has_context_commands = "context_commands" in context.bot_data
            logger.info("üß© DEPENDENCIES CHECK",
                       has_context_commands=has_context_commands,
                       available_deps=list(context.bot_data.keys()))

            try:
                result = await original_handle_callback_query(update, context)
                logger.info("‚úÖ CALLBACK PROCESSED SUCCESSFULLY", callback_data=callback_data)
                return result
            except Exception as e:
                logger.error("‚ùå CALLBACK PROCESSING FAILED",
                           callback_data=callback_data,
                           error=str(e),
                           exc_info=True)
                raise

        # –ó–∞–º—ñ–Ω—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
        callback.handle_callback_query = debug_handle_callback_query
        print("‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è callback'—ñ–≤")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ debug callback: {e}")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç
    try:
        await bot_main()
    except KeyboardInterrupt:
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        if original_handle_callback_query:
            callback.handle_callback_query = original_handle_callback_query


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)