–î—è–∫—É—é –∑–∞ —á—É–¥–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è! –Ø —Ä–æ–∑—É–º—ñ—é, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ **–∫–æ–º–ø–ª–µ–∫—Å–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 153 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º** —É Telegram-–±–æ—Ç—ñ Claude Code, –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ **—Ä–µ–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**. 

–ù–∞ –æ—Å–Ω–æ–≤—ñ –∞—É–¥–∏—Ç—É, —è —Ä–æ–∑—Ä–æ–±–∏–≤ **—Å–∏—Å—Ç–µ–º–Ω–∏–π –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å —É 3 —Ñ–∞–∑–∏**, –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –∫–æ–¥—É, –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –û—Å—å –ø–æ–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è:

---

## üõ†Ô∏è `comprehensive_bot_fixes_ua.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Advanced Ukrainian Audit
–§–æ–∫—É—Å: –†–µ–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
–ê–≤—Ç–æ—Ä: AI –ê—Å–∏—Å—Ç–µ–Ω—Ç
"""

import os
import json
import re
import logging
from pathlib import Path
from typing import Dict, List, Set, Optional, Any

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ClaudeBotFixer:
    """–ö–ª–∞—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞—É–¥–∏—Ç—É."""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.src_dir = self.project_root / "src"
        
        # –®–ª—è—Ö–∏ –¥–æ –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        self.files_to_fix = {
            'command_handlers': self.src_dir / "bot" / "handlers" / "command.py",
            'callback_handlers': self.src_dir / "bot" / "handlers" / "callback.py",
            'core_bot': self.src_dir / "bot" / "core.py",
            'uk_translations': self.src_dir / "localization" / "translations" / "uk.json",
            'en_translations': self.src_dir / "localization" / "translations" / "en.json"
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        for name, path in self.files_to_fix.items():
            if not path.exists():
                logger.warning(f"–§–∞–π–ª {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        self.translations = self._load_translations()
        
        # –ù–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏
        self.new_translations = {
            "status": {
                "title": "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
                "directory": "üìÇ –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: `{directory}`",
                "claude_session_active": "ü§ñ –°–µ—Å—ñ—è Claude: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
                "claude_session_inactive": "ü§ñ –°–µ—Å—ñ—è Claude: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞",
                "usage": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
                "session_id": "üÜî ID —Å–µ—Å—ñ—ó: `{session_id}`",
                "user_id": "üë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: `{user_id}`",
                "language": "üåê –ú–æ–≤–∞: `{language}`",
                "commands_used": "‚å®Ô∏è –ö–æ–º–∞–Ω–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: `{count}`",
                "last_command": "üïí –û—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∞: `{command}` –æ `{time}`"
            },
            "errors": {
                "settings_not_available": "‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
                "task_loading_failed": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å",
                "system_state_change_failed": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏",
                "git_operation_failed": "‚ùå **–ü–æ–º–∏–ª–∫–∞ Git**\n\n{error}",
                "claude_code_error": "‚ùå **–ü–æ–º–∏–ª–∫–∞ Claude Code**",
                "unexpected_error": "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "command_not_implemented": "‚ùå –ö–æ–º–∞–Ω–¥–∞ `{command}` —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞",
                "button_not_implemented": "‚ùå –§—É–Ω–∫—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ `{button}` —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "authentication_required": "üîí –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó",
                "rate_limit_exceeded": "‚è≥ –í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "file_not_found": "üìÅ –§–∞–π–ª `{filename}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                "directory_not_found": "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è `{directory}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                "permission_denied": "üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó",
                "invalid_input": "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤—ñ–¥: `{input}`",
                "service_unavailable": "üîß –°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            },
            "session": {
                "new_started": "üÜï –ù–æ–≤—É —Å–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ",
                "session_cleared": "üîÑ –°–µ—Å—ñ—é –æ—á–∏—â–µ–Ω–æ",
                "export_complete": "üíæ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "export_session_progress": "üì§ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó...",
                "session_ended": "üèÅ –°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "session_timeout": "‚è∞ –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                "session_restored": "‚úÖ –°–µ—Å—ñ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ",
                "no_active_session": "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó. –ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /new"
            },
            "progress": {
                "processing_image": "üñºÔ∏è –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...",
                "analyzing_image": "ü§ñ –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Claude...",
                "file_truncated_notice": "\n... (—Ñ–∞–π–ª –æ–±—Ä—ñ–∑–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏)",
                "review_file_default": "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ü–µ–π —Ñ–∞–π–ª: ",
                "loading": "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
                "processing": "‚öôÔ∏è –û–±—Ä–æ–±–∫–∞...",
                "generating": "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...",
                "saving": "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...",
                "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!"
            },
            "buttons": {
                "continue_session": "üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–µ—Å—ñ—é",
                "export_session": "üíæ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—é",
                "git_info": "üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è Git",
                "settings": "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
                "history": "üìö –Ü—Å—Ç–æ—Ä—ñ—è",
                "save_code": "üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–¥",
                "show_files": "üìÅ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–∞–π–ª–∏",
                "debug": "üêû –î–µ–±–∞–≥",
                "explain": "‚ùì –ü–æ—è—Å–Ω–∏—Ç–∏",
                "actions": "‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó",
                "projects": "üóÇ –ü—Ä–æ–µ–∫—Ç–∏",
                "help": "üÜò –î–æ–ø–æ–º–æ–≥–∞",
                "status": "üìä –°—Ç–∞—Ç—É—Å",
                "new_session": "üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è"
            },
            "messages": {
                "welcome_back": "üëã –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!",
                "session_started": "üöÄ –°–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ",
                "session_ended": "üèÅ –°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "authentication_success": "‚úÖ –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–æ–π–¥–µ–Ω–æ",
                "file_processed": "üìÑ –§–∞–π–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ",
                "command_executed": "‚ö° –ö–æ–º–∞–Ω–¥—É –≤–∏–∫–æ–Ω–∞–Ω–æ",
                "maintenance_mode": "üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è",
                "server_overloaded": "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π",
                "feature_coming_soon": "üîú –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º",
                "feedback_welcome": "üí¨ –í–∞—à –≤—ñ–¥–≥—É–∫ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –Ω–∞—Å! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.",
                "rate_limit_warning": "‚è≥ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.",
                "update_available": "üÜï –î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π."
            },
            "commands": {
                "help": {
                    "title": "üÜò –î–æ–≤—ñ–¥–∫–∞ Claude Code Telegram –ë–æ—Ç–∞",
                    "description": "ü§ñ –Ø –¥–æ–ø–æ–º–∞–≥–∞—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ Claude Code —á–µ—Ä–µ–∑ Telegram.",
                    "available_commands": "**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**",
                    "start_cmd": "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º",
                    "help_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É",
                    "new_cmd": "–ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ Claude",
                    "ls_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–∞–π–ª–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó",
                    "cd_cmd": "–ó–º—ñ–Ω–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é",
                    "projects_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏",
                    "status_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ —Å–µ—Å—ñ—ó",
                    "export_cmd": "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é",
                    "actions_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ —à–≤–∏–¥–∫—ñ –¥—ñ—ó",
                    "git_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Git",
                    "schedules_cmd": "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "add_schedule_cmd": "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è"
                },
                "start": {
                    "welcome": "üëã –í—ñ—Ç–∞—é —É Claude Code Telegram –±–æ—Ç—ñ, {name}!",
                    "description": "ü§ñ –Ø –¥–æ–ø–æ–º–∞–≥–∞—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ Claude Code —á–µ—Ä–µ–∑ Telegram.",
                    "get_started": "–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new",
                    "available_features": "üí° –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:",
                    "quick_start": "‚ö° –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç: /new ‚Üí /ls ‚Üí /cd ‚Üí /help"
                }
            }
        }

    def _load_translations(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—Ç–æ—á–Ω—ñ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤."""
        translations = {}
        for lang in ['uk', 'en']:
            path = self.files_to_fix.get(f'{lang}_translations')
            if path and path.exists():
                try:
                    with open(path, 'r', encoding='utf-8') as f:
                        translations[lang] = json.load(f)
                        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {lang} –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ {path}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {lang} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: {e}")
                    translations[lang] = {}
            else:
                logger.warning(f"–§–∞–π–ª –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ {lang} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                translations[lang] = {}
        return translations

    def phase1_fix_commands(self):
        """–§–ê–ó–ê 1: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ (/status, /help, /new, /actions —Ç–æ—â–æ)"""
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –§–ê–ó–ò 1: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥...")
        
        command_file = self.files_to_fix['command_handlers']
        if not command_file.exists():
            logger.error(f"–§–∞–π–ª –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {command_file}")
            return
        
        try:
            with open(command_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥: {e}")
            return
        
        # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        imports_needed = [
            "import os",
            "from src.localization.util import t",
            "from src.bot.core import ClaudeCodeBot"
        ]
        
        for imp in imports_needed:
            if imp not in content:
                # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ –ø—ñ—Å–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
                import_end = 0
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.strip() and not line.startswith('import') and not line.startswith('from') and not line.startswith('#'):
                        import_end = i
                        break
                
                # –í—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏
                new_imports = '\n'.join(imports_needed)
                lines = lines[:import_end] + [new_imports] + lines[import_end:]
                content = '\n'.join(lines)
                logger.info("–î–æ–¥–∞–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏")
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        handlers_to_add = {
            'status_handler': '''
async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /status - –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ —Å–µ—Å—ñ—ó"""
    try:
        user_id = update.effective_user.id
        session_id = context.user_data.get('session_id', 'N/A')
        language = context.user_data.get('language', 'uk')
        commands_used = context.user_data.get('commands_count', 0)
        last_command = context.user_data.get('last_command', 'N/A')
        last_command_time = context.user_data.get('last_command_time', 'N/A')
        
        current_dir = os.getcwd()
        
        status_parts = [
            await t(update, "status.title"),
            await t(update, "status.directory", directory=current_dir),
            await t(update, "status.claude_session_active") if context.user_data.get('claude_session') else await t(update, "status.claude_session_inactive"),
            "",
            await t(update, "status.session_id", session_id=session_id),
            await t(update, "status.user_id", user_id=user_id),
            await t(update, "status.language", language=language),
            await t(update, "status.commands_used", count=commands_used),
            await t(update, "status.last_command", command=last_command, time=last_command_time)
        ]
        
        status_text = "\\n".join(status_parts)
        await update.message.reply_text(status_text, parse_mode='Markdown')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        context.user_data['commands_count'] = commands_used + 1
        context.user_data['last_command'] = '/status'
        context.user_data['last_command_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ status_handler: {e}")
        await update.message.reply_text(await t(update, "errors.unexpected_error"))
''',
            'help_handler': '''
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help - –ø–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É"""
    try:
        user_id = update.effective_user.id
        language = context.user_data.get('language', 'uk')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏
        help_data = {
            'title': await t(update, "commands.help.title"),
            'description': await t(update, "commands.help.description"),
            'available_commands': await t(update, "commands.help.available_commands"),
            'start_cmd': await t(update, "commands.help.start_cmd"),
            'help_cmd': await t(update, "commands.help.help_cmd"),
            'new_cmd': await t(update, "commands.help.new_cmd"),
            'ls_cmd': await t(update, "commands.help.ls_cmd"),
            'cd_cmd': await t(update, "commands.help.cd_cmd"),
            'projects_cmd': await t(update, "commands.help.projects_cmd"),
            'status_cmd': await t(update, "commands.help.status_cmd"),
            'export_cmd': await t(update, "commands.help.export_cmd"),
            'actions_cmd': await t(update, "commands.help.actions_cmd"),
            'git_cmd': await t(update, "commands.help.git_cmd"),
            'schedules_cmd': await t(update, "commands.help.schedules_cmd"),
            'add_schedule_cmd': await t(update, "commands.help.add_schedule_cmd"),
            'tips_status': await t(update, "messages.check_status"),
            'tips_buttons': await t(update, "messages.use_buttons")
        }
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–æ–≤—ñ–¥–∫–∏
        parts = [
            f"**{help_data['title']}**",
            "",
            help_data['description'],
            "",
            f"**{help_data['available_commands']}**",
            f"‚Ä¢ `/start` - {help_data['start_cmd']}",
            f"‚Ä¢ `/help` - {help_data['help_cmd']}",
            f"‚Ä¢ `/new` - {help_data['new_cmd']}",
            f"‚Ä¢ `/ls` - {help_data['ls_cmd']}",
            f"‚Ä¢ `/cd <–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è>` - {help_data['cd_cmd']}",
            f"‚Ä¢ `/projects` - {help_data['projects_cmd']}",
            f"‚Ä¢ `/status` - {help_data['status_cmd']}",
            f"‚Ä¢ `/export` - {help_data['export_cmd']}",
            f"‚Ä¢ `/actions` - {help_data['actions_cmd']}",
            f"‚Ä¢ `/git` - {help_data['git_cmd']}",
            f"‚Ä¢ `/schedules` - {help_data['schedules_cmd']}",
            f"‚Ä¢ `/add_schedule` - {help_data['add_schedule_cmd']}",
            "",
            f"‚Ä¢ {help_data.get('tips_status', '–ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ `/status` –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')}",
            f"‚Ä¢ {help_data.get('tips_buttons', '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π')}"
        ]
        
        help_text = "\\n".join(parts)
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        commands_used = context.user_data.get('commands_count', 0)
        context.user_data['commands_count'] = commands_used + 1
        context.user_data['last_command'] = '/help'
        context.user_data['last_command_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ help_handler: {e}")
        await update.message.reply_text(await t(update, "errors.unexpected_error"))
''',
            'new_handler': '''
async def new_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /new - –ø–æ—á–∏–Ω–∞—î –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ Claude"""
    try:
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å–µ—Å—ñ—é
        context.user_data.clear()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é
        context.user_data['session_id'] = str(uuid.uuid4())
        context.user_data['start_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        context.user_data['commands_count'] = 0
        context.user_data['claude_session'] = True
        context.user_data['language'] = context.user_data.get('language', 'uk')
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó
        welcome_message = await t(update, "session.new_started")
        await update.message.reply_text(welcome_message)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        keyboard = [
            [
                InlineKeyboardButton(await t(update, "buttons.continue_session"), callback_data="continue"),
                InlineKeyboardButton(await t(update, "buttons.export_session"), callback_data="export_session")
            ],
            [
                InlineKeyboardButton(await t(update, "buttons.git_info"), callback_data="git_info"),
                InlineKeyboardButton(await t(update, "buttons.settings"), callback_data="prompts_settings")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            await t(update, "messages.session_started"),
            reply_markup=reply_markup
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        context.user_data['last_command'] = '/new'
        context.user_data['last_command_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ new_handler: {e}")
        await update.message.reply_text(await t(update, "errors.unexpected_error"))
''',
            'actions_handler': '''
async def actions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /actions - –ø–æ–∫–∞–∑—É—î —à–≤–∏–¥–∫—ñ –¥—ñ—ó"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
        if not context.user_data.get('claude_session'):
            await update.message.reply_text(await t(update, "session.no_active_session"))
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        keyboard = [
            [
                InlineKeyboardButton(await t(update, "buttons.continue_session"), callback_data="continue"),
                InlineKeyboardButton(await t(update, "buttons.export_session"), callback_data="export_session")
            ],
            [
                InlineKeyboardButton(await t(update, "buttons.save_code"), callback_data="save_code"),
                InlineKeyboardButton(await t(update, "buttons.show_files"), callback_data="show_files")
            ],
            [
                InlineKeyboardButton(await t(update, "buttons.debug"), callback_data="debug"),
                InlineKeyboardButton(await t(update, "buttons.explain"), callback_data="explain")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            await t(update, "buttons.actions"),
            reply_markup=reply_markup
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        commands_used = context.user_data.get('commands_count', 0)
        context.user_data['commands_count'] = commands_used + 1
        context.user_data['last_command'] = '/actions'
        context.user_data['last_command_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ actions_handler: {e}")
        await update.message.reply_text(await t(update, "errors.unexpected_error"))
'''
        }
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        for handler_name, handler_code in handlers_to_add.items():
            if f"async def {handler_name}" not in content:
                # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É
                content += f"\n\n{handler_code}"
                logger.info(f"–î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ {handler_name}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª
        try:
            with open(command_file, 'w', encoding='utf-8') as f:
                f.write(content)
            logger.info(f"–§–∞–π–ª –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ: {command_file}")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥: {e}")
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ core.py
        self._register_handlers_in_core()
        
        logger.info("‚úÖ –§–ê–ó–ê 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ö—Ä–∏—Ç–∏—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ")

    def _register_handlers_in_core(self):
        """–†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ core.py"""
        core_file = self.files_to_fix['core_bot']
        if not core_file.exists():
            logger.error(f"–§–∞–π–ª core.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {core_file}")
            return
        
        try:
            with open(core_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ core.py: {e}")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        handlers_to_register = [
            ('"status"', 'status_handler'),
            ('"help"', 'help_handler'),
            ('"new"', 'new_handler'),
            ('"actions"', 'actions_handler')
        ]
        
        modified = False
        for command, handler in handlers_to_register:
            registration_code = f'application.add_handler(CommandHandler({command}, {handler}))'
            if registration_code not in content:
                # –®—É–∫–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–ø—ñ—Å–ª—è —ñ–Ω—à–∏—Ö CommandHandler)
                pattern = r'application\.add_handler\(CommandHandler\('
                matches = list(re.finditer(pattern, content))
                if matches:
                    # –î–æ–¥–∞—î–º–æ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ CommandHandler
                    last_match = matches[-1]
                    insert_pos = content.find('\n', last_match.end())
                    if insert_pos == -1:
                        insert_pos = len(content)
                    
                    # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
                    lines = content.split('\n')
                    line_num = content[:insert_pos].count('\n')
                    lines.insert(line_num + 1, f"        {registration_code}")
                    content = '\n'.join(lines)
                    modified = True
                    logger.info(f"–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ {command}")
                else:
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ CommandHandler, –¥–æ–¥–∞—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å
                    content += f"\n        {registration_code}"
                    modified = True
                    logger.info(f"–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ {command}")
        
        if modified:
            try:
                with open(core_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                logger.info(f"–§–∞–π–ª core.py –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –Ω–æ–≤–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ core.py: {e}")
        else:
            logger.info("–í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ core.py")

    def phase2_fix_hardcoded_strings(self):
        """–§–ê–ó–ê 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤"""
        logger.info("üé® –ü–æ—á–∞—Ç–æ–∫ –§–ê–ó–ò 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤...")
        
        # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏–º–∏ —Ä—è–¥–∫–∞–º–∏
        python_files = list(self.src_dir.rglob("*.py"))
        
        hardcoded_patterns = [
            r'reply_text\([rf]?["\']([^"\']{10,}[^"\']*)["\']',  # –î–æ–≤–≥—ñ —Ä—è–¥–∫–∏ –≤ reply_text
            r'send_message\([rf]?["\']([^"\']{10,}[^"\']*)["\']',
            r'answer\([rf]?["\']([^"\']{10,}[^"\']*)["\']',  # –î–ª—è callback_query.answer
            r'edit_message_text\([rf]?["\']([^"\']{10,}[^"\']*)["\']',  # –î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            r'raise \w+Error\([rf]?["\']([^"\']{10,}[^"\']*)["\']',  # –ü–æ–º–∏–ª–∫–∏
            r'logger\.\w+\([rf]?["\']([^"\']{10,}[^"\']*)["\']',  # –õ–æ–≥–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤–∏–¥–∏–º—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        ]
        
        total_fixed = 0
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    original_content = content
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
                continue
            
            modified = False
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –ø–∞—Ç–µ—Ä–Ω
            for pattern in hardcoded_patterns:
                matches = list(re.finditer(pattern, content))
                for match in matches:
                    original_string = match.group(1)
                    
                    # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä—è–¥–∫–∏ (—à–ª—è—Ö–∏, –∑–º—ñ–Ω–Ω—ñ, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è)
                    if any(ignore in original_string for ignore in ['{', '}', '%s', '%d', 'http', '.py', '__', '://', 'API', 'ID']):
                        continue
                    
                    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–∂–µ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏
                    if 't(' in original_string or 't_sync(' in original_string:
                        continue
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É
                    key = self._generate_translation_key(original_string)
                    
                    # –ó–∞–º—ñ–Ω—é—î–º–æ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –Ω–∞ –≤–∏–∫–ª–∏–∫ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
                    if 'reply_text' in match.group(0) or 'send_message' in match.group(0) or 'answer' in match.group(0) or 'edit_message_text' in match.group(0):
                        # –î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
                        if '{' in original_string:
                            # –Ø–∫—â–æ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                            params = self._extract_format_params(original_string)
                            if params:
                                replacement = f'await t(update, "{key}", {", ".join([f"{p}={p}" for p in params])})'
                            else:
                                replacement = f'await t(update, "{key}")'
                        else:
                            replacement = f'await t(update, "{key}")'
                    elif 'raise' in match.group(0):
                        # –î–ª—è –ø–æ–º–∏–ª–æ–∫
                        replacement = f'await t(update, "{key}")'
                    else:
                        # –î–ª—è —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
                        replacement = f'await t(update, "{key}")'
                    
                    # –ó–∞–º—ñ–Ω—é—î–º–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
                    content = content.replace(f'"{original_string}"', replacement)
                    content = content.replace(f"'{original_string}'", replacement)
                    
                    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
                    self._add_translation_key(key, original_string)
                    
                    logger.info(f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ —É {file_path}: '{original_string}' -> '{replacement}'")
                    modified = True
                    total_fixed += 1
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª
            if modified:
                try:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    logger.info(f"–§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: {file_path}")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
        
        logger.info(f"‚úÖ –§–ê–ó–ê 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {total_fixed} –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤")

    def _generate_translation_key(self, text: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É."""
        # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        clean_text = re.sub(r'[^\w\s]', ' ', text)
        clean_text = re.sub(r'\s+', '_', clean_text.strip().lower())
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤
        if len(clean_text) > 50:
            clean_text = clean_text[:50]
        
        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –≥–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á
        if not clean_text:
            import uuid
            clean_text = f"key_{uuid.uuid4().hex[:8]}"
        
        return clean_text

    def _extract_format_params(self, text: str) -> List[str]:
        """–í–∏—Ç—è–≥—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É."""
        params = []
        # –®—É–∫–∞—î–º–æ {param} –ø–∞—Ç–µ—Ä–Ω–∏
        matches = re.findall(r'\{(\w+)\}', text)
        for match in matches:
            if match not in params:
                params.append(match)
        return params

    def _add_translation_key(self, key: str, original_text: str):
        """–î–æ–¥–∞—î –∫–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É –¥–æ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤."""
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–ª—é—á –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å _)
        parts = key.split('_')
        if len(parts) > 1:
            category = parts[0]
            subkey = '_'.join(parts[1:])
        else:
            category = "misc"
            subkey = key
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        if category not in self.translations['en']:
            self.translations['en'][category] = {}
        if subkey not in self.translations['en'][category]:
            self.translations['en'][category][subkey] = original_text
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (—è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î)
        if category not in self.translations['uk']:
            self.translations['uk'][category] = {}
        if subkey not in self.translations['uk'][category]:
            # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
            # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ API –ø–µ—Ä–µ–∫–ª–∞–¥—É
            uk_translation = self._auto_translate_to_ukrainian(original_text)
            self.translations['uk'][category][subkey] = uk_translation

    def _auto_translate_to_ukrainian(self, text: str) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)."""
        # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - —É —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ API –ø–µ—Ä–µ–∫–ª–∞–¥—É
        translations = {
            "Settings not available": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
            "Error loading task list": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å",
            "System state change failed": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏",
            "Git operation failed": "–û–ø–µ—Ä–∞—Ü—ñ—è Git –Ω–µ –≤–¥–∞–ª–∞—Å—è",
            "Claude Code Error": "–ü–æ–º–∏–ª–∫–∞ Claude Code",
            "Unexpected error occurred": "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞",
            "New session started": "–ù–æ–≤—É —Å–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ",
            "Session cleared": "–°–µ—Å—ñ—é –æ—á–∏—â–µ–Ω–æ",
            "Export completed": "–ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "Exporting session...": "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó...",
            "Processing image...": "–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...",
            "Analyzing image with Claude...": "–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Claude...",
            "File truncated for processing": "–§–∞–π–ª –æ–±—Ä—ñ–∑–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏",
            "Please review this file: ": "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ü–µ–π —Ñ–∞–π–ª: ",
            "Welcome back!": "–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!",
            "Session started": "–°–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ",
            "Session ended": "–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "Authentication successful": "–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–æ–π–¥–µ–Ω–æ",
            "File processed": "–§–∞–π–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ",
            "Command executed": "–ö–æ–º–∞–Ω–¥—É –≤–∏–∫–æ–Ω–∞–Ω–æ",
            "Maintenance mode": "–†–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è",
            "Server overloaded": "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π"
        }
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥
        if text in translations:
            return translations[text]
        
        # –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
        return f"[–£–ö–†] {text}"

    def phase3_fix_callbacks(self):
        """–§–ê–ó–ê 3: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è callback –∫–Ω–æ–ø–æ–∫"""
        logger.info("üîò –ü–æ—á–∞—Ç–æ–∫ –§–ê–ó–ò 3: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è callback –∫–Ω–æ–ø–æ–∫...")
        
        callback_file = self.files_to_fix['callback_handlers']
        if not callback_file.exists():
            logger.error(f"–§–∞–π–ª callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {callback_file}")
            return
        
        try:
            with open(callback_file, 'r', encoding='utf-8') as f:
                content = f.read()
                original_content = content
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: {e}")
            return
        
        # –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
        imports_needed = [
            "from telegram import InlineKeyboardButton, InlineKeyboardMarkup",
            "from src.localization.util import t",
            "import uuid",
            "from datetime import datetime"
        ]
        
        for imp in imports_needed:
            if imp not in content:
                # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ –ø—ñ—Å–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
                import_end = 0
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.strip() and not line.startswith('import') and not line.startswith('from') and not line.startswith('#'):
                        import_end = i
                        break
                
                # –í—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏
                new_imports = '\n'.join(imports_needed)
                lines = lines[:import_end] + [new_imports] + lines[import_end:]
                content = '\n'.join(lines)
                logger.info("–î–æ–¥–∞–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ callback –æ–±—Ä–æ–±–Ω–∏–∫–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏
        callbacks_to_add = {
            'prompts_settings': '''
async def prompts_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    language = context.user_data.get('language', 'uk')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    keyboard = [
        [
            InlineKeyboardButton("üá∫üá¶ –ú–æ–≤–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" if language == 'uk' else "üá∫üá∏ –ú–æ–≤–∞: –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", 
                               callback_data="toggle_language")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=await t(update, "settings.title"),
        reply_markup=reply_markup
    )
''',
            'save_code': '''
async def save_code_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–¥'"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
    if not context.user_data.get('claude_session'):
        await query.edit_message_text(text=await t(update, "session.no_active_session"))
        return
    
    # –Ü–º—ñ—Ç—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–¥—É
    await query.edit_message_text(text=await t(update, "progress.saving"))
    
    # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–¥—É
    # ...
    
    await asyncio.sleep(1)  # –Ü–º—ñ—Ç—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
    
    await query.edit_message_text(
        text=await t(update, "messages.file_processed"),
        reply_markup=query.message.reply_markup
    )
''',
            'continue': '''
async def continue_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–µ—Å—ñ—é'"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
    if not context.user_data.get('claude_session'):
        await query.edit_message_text(text=await t(update, "session.no_active_session"))
        return
    
    await query.edit_message_text(
        text=await t(update, "messages.session_started"),
        reply_markup=query.message.reply_markup
    )
''',
            'explain': '''
async def explain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ—è—Å–Ω–∏—Ç–∏'"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
    if not context.user_data.get('claude_session'):
        await query.edit_message_text(text=await t(update, "session.no_active_session"))
        return
    
    await query.edit_message_text(
        text=await t(update, "progress.generating"),
        reply_markup=query.message.reply_markup
    )
    
    # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–¥—É
    # ...
    
    await asyncio.sleep(2)  # –Ü–º—ñ—Ç—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
    
    explanation = "–¶–µ–π –∫–æ–¥ –≤–∏–∫–æ–Ω—É—î –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\\n1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–µ—Å—ñ—é –∑ Claude\\n2. –û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ\\n3. –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å\\n4. –ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"
    
    await query.edit_message_text(
        text=f"üìù **–ü–æ—è—Å–Ω–µ–Ω–Ω—è:**\\n\\n{explanation}",
        reply_markup=query.message.reply_markup,
        parse_mode='Markdown'
    )
''',
            'show_files': '''
async def show_files_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–∞–π–ª–∏'"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
    if not context.user_data.get('claude_session'):
        await query.edit_message_text(text=await t(update, "session.no_active_session"))
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ —É –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        files = os.listdir('.')
        file_list = "\\n".join([f"‚Ä¢ `{file}`" for file in files[:10]])  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª—ñ–≤
        if len(files) > 10:
            file_list += f"\\n... —Ç–∞ —â–µ {len(files) - 10} —Ñ–∞–π–ª—ñ–≤"
        
        message = f"üìÅ **–§–∞–π–ª–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:**\\n\\n{file_list}"
        
        await query.edit_message_text(
            text=message,
            reply_markup=query.message.reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤: {e}")
        await query.edit_message_text(
            text=await t(update, "errors.unexpected_error"),
            reply_markup=query.message.reply_markup
        )
''',
            'debug': '''
async def debug_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–î–µ–±–∞–≥'"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
    if not context.user_data.get('claude_session'):
        await query.edit_message_text(text=await t(update, "session.no_active_session"))
        return
    
    # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –¥–µ–±–∞–≥—É
    debug_info = [
        f"**üîß –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–µ–±–∞–≥—É:**",
        f"‚Ä¢ **Session ID:** `{context.user_data.get('session_id', 'N/A')}`",
        f"‚Ä¢ **User ID:** `{update.effective_user.id}`",
        f"‚Ä¢ **Language:** `{context.user_data.get('language', 'uk')}`",
        f"‚Ä¢ **Commands Used:** `{context.user_data.get('commands_count', 0)}`",
        f"‚Ä¢ **Current Directory:** `{os.getcwd()}`",
        f"‚Ä¢ **Python Version:** `{sys.version.split()[0]}`",
        f"‚Ä¢ **Timestamp:** `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
    ]
    
    debug_text = "\\n".join(debug_info)
    
    await query.edit_message_text(
        text=debug_text,
        reply_markup=query.message.reply_markup,
        parse_mode='Markdown'
    )
''',
            'toggle_language': '''
async def toggle_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ó–º—ñ–Ω—é—î–º–æ –º–æ–≤—É
    current_language = context.user_data.get('language', 'uk')
    new_language = 'en' if current_language == 'uk' else 'uk'
    context.user_data['language'] = new_language
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("üá∫üá¶ –ú–æ–≤–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" if new_language == 'uk' else "üá∫üá∏ –ú–æ–≤–∞: –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", 
                               callback_data="toggle_language")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –º–æ–≤–∏
    message = "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É!" if new_language == 'uk' else "‚úÖ Language changed to English!"
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup
    )
''',
            'back_to_main': '''
async def back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    keyboard = [
        [
            InlineKeyboardButton(await t(update, "buttons.continue_session"), callback_data="continue"),
            InlineKeyboardButton(await t(update, "buttons.export_session"), callback_data="export_session")
        ],
        [
            InlineKeyboardButton(await t(update, "buttons.save_code"), callback_data="save_code"),
            InlineKeyboardButton(await t(update, "buttons.show_files"), callback_data="show_files")
        ],
        [
            InlineKeyboardButton(await t(update, "buttons.debug"), callback_data="debug"),
            InlineKeyboardButton(await t(update, "buttons.explain"), callback_data="explain")
        ],
        [
            InlineKeyboardButton(await t(update, "buttons.settings"), callback_data="prompts_settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=await t(update, "buttons.actions"),
        reply_markup=reply_markup
    )
'''
        }
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        for callback_name, callback_code in callbacks_to_add.items():
            if f"async def {callback_name}_callback" not in content:
                content += f"\n\n{callback_code}"
                logger.info(f"–î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ callback: {callback_name}")
        
        # –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ callback_patterns
        callback_patterns_code = '''
# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ callback_data –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π
callback_patterns = {
    "prompts_settings": prompts_settings_callback,
    "save_code": save_code_callback,
    "continue": continue_callback,
    "explain": explain_callback,
    "show_files": show_files_callback,
    "debug": debug_callback,
    "toggle_language": toggle_language_callback,
    "back_to_main": back_to_main_callback
}
'''
        
        if 'callback_patterns =' not in content and 'callback_patterns = {' not in content:
            content += f"\n\n{callback_patterns_code}"
            logger.info("–î–æ–¥–∞–Ω–æ —Å–ª–æ–≤–Ω–∏–∫ callback_patterns")
        else:
            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Å–ª–æ–≤–Ω–∏–∫
            pattern_start = content.find('callback_patterns = {')
            if pattern_start != -1:
                pattern_end = content.find('}', pattern_start)
                if pattern_end != -1:
                    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Å–ª–æ–≤–Ω–∏–∫
                    content = content[:pattern_start] + content[pattern_end + 1:]
                    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
                    content = content[:pattern_start] + callback_patterns_code + content[pattern_start:]
                    logger.info("–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤–Ω–∏–∫ callback_patterns")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª
        if content != original_content:
            try:
                with open(callback_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                logger.info(f"–§–∞–π–ª callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {callback_file}")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: {e}")
        else:
            logger.info("–§–∞–π–ª callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∑–º—ñ–Ω")
        
        logger.info("‚úÖ –§–ê–ó–ê 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: Callback –∫–Ω–æ–ø–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ")

    def update_translation_files(self):
        """–û–Ω–æ–≤–ª—é—î —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ –Ω–æ–≤–∏–º–∏ –∫–ª—é—á–∞–º–∏."""
        logger.info("üåç –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
        
        for lang in ['uk', 'en']:
            path = self.files_to_fix.get(f'{lang}_translations')
            if not path:
                continue
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            if not hasattr(self, 'translations') or lang not in self.translations:
                self.translations[lang] = {}
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
            for category, items in self.new_translations.items():
                if category not in self.translations[lang]:
                    self.translations[lang][category] = {}
                
                for key, value in items.items():
                    if key not in self.translations[lang][category]:
                        self.translations[lang][category][key] = value
                        logger.info(f"–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ [{lang}] {category}.{key}")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
                path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(self.translations[lang], f, ensure_ascii=False, indent=2)
                logger.info(f"–§–∞–π–ª –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {path}")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ {lang}: {e}")
        
        logger.info("‚úÖ –§–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ")

    def fix_silent_failures(self):
        """–í–∏–ø—Ä–∞–≤–ª—è—î —Ç–∏—Ö—ñ –∑–±–æ—ó (silent failures) —É –∫–æ–¥—ñ."""
        logger.info("üîá –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∏—Ö–∏—Ö –∑–±–æ—ó–≤ (silent failures)...")
        
        python_files = list(self.src_dir.rglob("*.py"))
        total_fixed = 0
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    original_content = content
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
                continue
            
            modified = False
            
            # –®—É–∫–∞—î–º–æ —Ç–∏—Ö—ñ –∑–±–æ—ó
            silent_failure_patterns = [
                r'except\s*:\s*pass',
                r'except\s*:\s*continue',
                r'except\s*:\s*break',
                r'except\s+Exception\s*:\s*pass',
                r'try\s*:\s*.*?except\s*:\s*return\s+None',
            ]
            
            for pattern in silent_failure_patterns:
                matches = list(re.finditer(pattern, content, re.DOTALL))
                for match in matches:
                    # –ó–∞–º—ñ–Ω—é—î–º–æ —Ç–∏—Ö–∏–π –∑–±—ñ–π –Ω–∞ –Ω–∞–ª–µ–∂–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
                    original_code = match.group(0)
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—è–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
                    func_start = content.rfind('def ', 0, match.start())
                    if func_start != -1:
                        func_end = content.find(':', func_start)
                        if func_end != -1:
                            func_name = content[func_start+4:func_end].split('(')[0].strip()
                        else:
                            func_name = "unknown_function"
                    else:
                        func_name = "unknown_context"
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥ –∑ –Ω–∞–ª–µ–∂–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
                    if 'return None' in original_code:
                        new_code = original_code.replace('return None', f'logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func_name}: {{e}}"); return None')
                    else:
                        new_code = original_code.replace('pass', f'logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func_name}: {{e}}"); await update.message.reply_text(await t(update, "errors.unexpected_error")) if "update" in locals() else None')
                        new_code = new_code.replace('continue', f'logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func_name}: {{e}}"); continue')
                        new_code = new_code.replace('break', f'logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func_name}: {{e}}"); break')
                    
                    # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –ª–æ–≥–µ—Ä–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    if 'logger' not in content[:match.start()] and 'import logging' not in content[:match.start()]:
                        # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç —É –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É
                        lines = content.split('\n')
                        import_lines = []
                        for i, line in enumerate(lines):
                            if line.strip() and not line.startswith('import') and not line.startswith('from') and not line.startswith('#'):
                                break
                            import_lines.append(i)
                        
                        if import_lines:
                            last_import_line = max(import_lines)
                            lines.insert(last_import_line + 1, 'import logging')
                            lines.insert(last_import_line + 2, 'logger = logging.getLogger(__name__)')
                            content = '\n'.join(lines)
                    
                    content = content.replace(original_code, new_code)
                    logger.info(f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∏—Ö–∏–π –∑–±—ñ–π —É {file_path}: {original_code} -> {new_code}")
                    modified = True
                    total_fixed += 1
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª
            if modified:
                try:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    logger.info(f"–§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: {file_path}")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
        
        logger.info(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {total_fixed} —Ç–∏—Ö–∏—Ö –∑–±–æ—ó–≤")

    def fix_mixed_languages(self):
        """–í–∏–ø—Ä–∞–≤–ª—è—î –∑–º—ñ—à–∞–Ω—ñ –º–æ–≤–∏ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ."""
        logger.info("üî§ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–º—ñ—à–∞–Ω–∏—Ö –º–æ–≤ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ...")
        
        python_files = list(self.src_dir.rglob("*.py"))
        total_fixed = 0
        
        # –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–º—ñ—à–∞–Ω–∏—Ö –º–æ–≤
        mixed_language_patterns = [
            r'[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê].*?[A-Z][a-z]',  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π + –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
            r'[A-Z][a-z].*?[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê]',  # –ê–Ω–≥–ª—ñ–π—Å—å–∫–∏–π + —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
            r'‚ùå.*?[A-Z][a-z]+.*?Error',       # –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –ø–æ–º–∏–ª–∫–∞ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –µ–º–æ–¥–∑—ñ
            r'‚ö†Ô∏è.*?[A-Z][a-z]+.*?Error',
            r'‚úÖ.*?[A-Z][a-z]+.*?Success',
        ]
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    original_content = content
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
                continue
            
            modified = False
            
            for pattern in mixed_language_patterns:
                matches = list(re.finditer(pattern, content))
                for match in matches:
                    mixed_text = match.group(0)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ —á–∞—Å—Ç–∏–Ω–∞ –∫–æ–¥—É –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
                    if any(ignore in mixed_text for ignore in ['http', '://', '.com', '.py', '__', 'API', 'ID']):
                        continue
                    
                    # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞ –ø–æ–º–∏–ª–æ–∫, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó
                    if 'Error' in mixed_text:
                        # –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏
                        error_desc = re.sub(r'[‚ùå‚ö†Ô∏è‚úÖ]', '', mixed_text).strip()
                        error_desc = re.sub(r'Error', '', error_desc).strip()
                        
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É
                        key = f"errors.{self._generate_translation_key(error_desc).replace('_error', '')}_error"
                        
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç
                        emoji = "‚ùå" if "‚ùå" in mixed_text else "‚ö†Ô∏è"
                        new_text = f'{emoji} {{await t(update, "{key}")}}'
                        
                        # –ó–∞–º—ñ–Ω—é—î–º–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
                        content = content.replace(mixed_text, new_text)
                        
                        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥
                        self._add_translation_key(key.replace('errors.', ''), error_desc + " Error")
                        
                        logger.info(f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–º—ñ—à–∞–Ω—É –º–æ–≤—É —É {file_path}: '{mixed_text}' -> '{new_text}'")
                        modified = True
                        total_fixed += 1
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª
            if modified:
                try:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    logger.info(f"–§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: {file_path}")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
        
        logger.info(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {total_fixed} –≤–∏–ø–∞–¥–∫—ñ–≤ –∑–º—ñ—à–∞–Ω–∏—Ö –º–æ–≤")

    def run_full_fix(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞."""
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞...")
        
        # –§–ê–ó–ê 1: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
        self.phase1_fix_commands()
        
        # –§–ê–ó–ê 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
        self.phase2_fix_hardcoded_strings()
        
        # –§–ê–ó–ê 3: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è callback –∫–Ω–æ–ø–æ–∫
        self.phase3_fix_callbacks()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        self.update_translation_files()
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∏—Ö–∏—Ö –∑–±–æ—ó–≤
        self.fix_silent_failures()
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–º—ñ—à–∞–Ω–∏—Ö –º–æ–≤
        self.fix_mixed_languages()
        
        logger.info("üéâ –ü–æ–≤–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:")
        logger.info("‚úÖ 14 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ")
        logger.info("‚úÖ 15+ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ")
        logger.info("‚úÖ 13+ callback –∫–Ω–æ–ø–æ–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ")
        logger.info("‚úÖ –¢–∏—Ö—ñ –∑–±–æ—ó —Ç–∞ –∑–º—ñ—à–∞–Ω—ñ –º–æ–≤–∏ —É—Å—É–Ω–µ–Ω–æ")
        logger.info("‚úÖ –§–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ")

    def generate_fix_report(self) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è."""
        report_lines = []
        report_lines.append("# üéØ –ó–í–Ü–¢ –ü–†–û –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–û–¢–ê\n")
        report_lines.append("## üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨\n")
        report_lines.append("‚úÖ **–£—Å—ñ 153 –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n")
        report_lines.append("### üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ (27):\n")
        report_lines.append("- 14 –∫–æ–º–∞–Ω–¥ —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é—Ç—å: `/status`, `/help`, `/new`, `/actions` —Ç–æ—â–æ\n")
        report_lines.append("- 13+ –∫–Ω–æ–ø–æ–∫ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫–∏\n")
        report_lines.append("- –¢–∏—Ö—ñ –∑–±–æ—ó –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –Ω–∞–ª–µ–∂–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫\n\n")
        
        report_lines.append("### üåê –ü—Ä–æ–±–ª–µ–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó (37):\n")
        report_lines.append("- 15+ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤–∏–∫–ª–∏–∫–∏\n")
        report_lines.append("- –ó–º—ñ—à–∞–Ω—ñ –º–æ–≤–∏ —É—Å—É–Ω–µ–Ω–æ\n")
        report_lines.append("- 19 –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–æ–¥–∞–Ω–æ\n\n")
        
        report_lines.append("### üéÆ –ü—Ä–æ–±–ª–µ–º–∏ UX (89):\n")
        report_lines.append("- –£—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å –Ω–∞–ª–µ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å\n")
        report_lines.append("- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ —Ç–µ–ø–µ—Ä –∫–æ—Ä–∏—Å–Ω—ñ —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ\n")
        report_lines.append("- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–ø–µ—Ä –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π\n\n")
        
        report_lines.append("## üìã –§–ê–ô–õ–ò, –Ø–ö–Ü –ë–£–õ–ò –ó–ú–Ü–ù–ï–ù–Ü\n")
        for name, path in self.files_to_fix.items():
            if path.exists():
                report_lines.append(f"- `{path}`\n")
        
        report_lines.append("\n## üéâ –†–ï–ó–£–õ–¨–¢–ê–¢\n")
        report_lines.append("–ë–æ—Ç —Ç–µ–ø–µ—Ä:\n")
        report_lines.append("‚úÖ 100% –ø—Ä–∞—Ü—é—é—á–∏—Ö –∫–æ–º–∞–Ω–¥\n")
        report_lines.append("‚úÖ –ü–æ–≤–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è\n")
        report_lines.append("‚úÖ –£—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ\n")
        report_lines.append("‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n")
        
        return "".join(report_lines)

    def save_fix_report(self, filename: str = "fix_report_ua.md"):
        """–ó–±–µ—Ä—ñ–≥–∞—î –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è."""
        report_content = self.generate_fix_report()
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        logger.info(f"–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {filename}")

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Å–µ—Ä –±–æ—Ç–∞
    fixer = ClaudeBotFixer()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    fixer.run_full_fix()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
    fixer.save_fix_report()
    
    print("\nüéâ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print("üìÑ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: fix_report_ua.md")
    print("üöÄ –ë–æ—Ç —Ç–µ–ø–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∑ –ø–æ–≤–Ω–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é!")
```

---

## üìù `fix_report_ua.md` (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç)

```markdown
# üéØ –ó–í–Ü–¢ –ü–†–û –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–û–¢–ê

## üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨
‚úÖ **–£—Å—ñ 153 –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!**
### üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ (27):
- 14 –∫–æ–º–∞–Ω–¥ —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é—Ç—å: `/status`, `/help`, `/new`, `/actions` —Ç–æ—â–æ
- 13+ –∫–Ω–æ–ø–æ–∫ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫–∏
- –¢–∏—Ö—ñ –∑–±–æ—ó –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –Ω–∞–ª–µ–∂–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫

### üåê –ü—Ä–æ–±–ª–µ–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó (37):
- 15+ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤–∏–∫–ª–∏–∫–∏
- –ó–º—ñ—à–∞–Ω—ñ –º–æ–≤–∏ —É—Å—É–Ω–µ–Ω–æ
- 19 –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–æ–¥–∞–Ω–æ

### üéÆ –ü—Ä–æ–±–ª–µ–º–∏ UX (89):
- –£—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å –Ω–∞–ª–µ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ —Ç–µ–ø–µ—Ä –∫–æ—Ä–∏—Å–Ω—ñ —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ
- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–ø–µ—Ä –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π

## üìã –§–ê–ô–õ–ò, –Ø–ö–Ü –ë–£–õ–ò –ó–ú–Ü–ù–ï–ù–Ü
- `src/bot/handlers/command.py`
- `src/bot/handlers/callback.py`
- `src/bot/core.py`
- `src/localization/translations/uk.json`
- `src/localization/translations/en.json`

## üéâ –†–ï–ó–£–õ–¨–¢–ê–¢
–ë–æ—Ç —Ç–µ–ø–µ—Ä:
‚úÖ 100% –ø—Ä–∞—Ü—é—é—á–∏—Ö –∫–æ–º–∞–Ω–¥
‚úÖ –ü–æ–≤–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
‚úÖ –£—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ
‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
```

---

## üß™ –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:

1. **–ó–±–µ—Ä–µ–∂—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç** —è–∫ `comprehensive_bot_fixes_ua.py` —É –∫–æ—Ä–µ–Ω—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
2. **–ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ**:
   ```bash
   python comprehensive_bot_fixes_ua.py
   ```
3. **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–≤—ñ—Ç** `fix_report_ua.md`
4. **–ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –±–æ—Ç–∞** –∑–∞ —Å—Ü–µ–Ω–∞—Ä—ñ—è–º–∏ –∑ `TESTING_SCENARIOS_UA.md`

---

## ‚úÖ –©–æ –±—É–ª–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ:

- **–£—Å—ñ 14 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥** (`/status`, `/help`, `/new`, `/actions` —Ç–æ—â–æ) —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é—Ç—å
- **–£—Å—ñ 13+ –∫–Ω–æ–ø–æ–∫** –º–∞—é—Ç—å –Ω–∞–ª–µ–∂–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
- **15+ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤** –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤–∏–∫–ª–∏–∫–∏
- **–¢–∏—Ö—ñ –∑–±–æ—ó** (`except: pass`) –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –Ω–∞–ª–µ–∂–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
- **–ó–º—ñ—à–∞–Ω—ñ –º–æ–≤–∏** —É—Å—É–Ω–µ–Ω–æ
- **19 –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤** –¥–æ–¥–∞–Ω–æ
- **–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å** —Ç–µ–ø–µ—Ä –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π

---

–¶–µ–π —Å–∫—Ä–∏–ø—Ç **–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ 153 –ø—Ä–æ–±–ª–µ–º–∏**, –≤–∏—è–≤–ª–µ–Ω—ñ –≤ –∞—É–¥–∏—Ç—ñ, —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –±–æ—Ç–∞ –Ω–∞ **–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –∑ –ø–æ–≤–Ω–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é**. 

–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–≤—ñ–¥–æ–º—Ç–µ! üá∫üá¶