"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è Claude Bot
"""

import asyncio
from typing import Optional
from telegram import Message

class ProgressIndicator:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–ø–µ—Ä–∞—Ü—ñ–π"""

    def __init__(self, message: Message):
        self.message = message
        self.is_running = False
        self.current_step = 0
        self.total_steps = 0

    async def start(self, total_steps: int, initial_text: str = "üîÑ –û–±—Ä–æ–±–∫–∞..."):
        """–†–æ–∑–ø–æ—á–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.total_steps = total_steps
        self.current_step = 0
        self.is_running = True

        try:
            await self.message.edit_text(initial_text)
        except:
            pass

    async def update(self, step: int, text: str = ""):
        """–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"""
        if not self.is_running:
            return

        self.current_step = step
        percentage = int((step / self.total_steps) * 100) if self.total_steps > 0 else 0

        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        filled = "‚ñà" * (percentage // 10)
        empty = "‚ñë" * (10 - (percentage // 10))
        progress_bar = f"[{filled}{empty}] {percentage}%"

        message_text = f"‚è≥ {text}\n\n{progress_bar}\n–ö—Ä–æ–∫ {step}/{self.total_steps}"

        try:
            await self.message.edit_text(message_text)
        except:
            pass

    async def complete(self, final_text: str = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!"):
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.is_running = False

        try:
            await self.message.edit_text(final_text)
        except:
            pass

class StatusMessage:
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""

    @staticmethod
    async def show_typing(message: Message, duration: int = 3):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É"""
        try:
            await message._client.send_chat_action(message.chat.id, "typing")
            await asyncio.sleep(duration)
        except:
            pass

    @staticmethod
    async def show_processing(message: Message, text: str = "üîÑ –û–±—Ä–æ–±–∫–∞..."):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É"""
        try:
            return await message.reply_text(text)
        except:
            return None

    @staticmethod
    async def update_status(status_message: Message, new_text: str):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            await status_message.edit_text(new_text)
        except:
            pass

def create_progress_indicator(message: Message) -> ProgressIndicator:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
    return ProgressIndicator(message)
