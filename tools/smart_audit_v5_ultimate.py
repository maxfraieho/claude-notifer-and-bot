#!/usr/bin/env python3
"""
Smart Audit v5 Ultimate - –ù–∞–π—Ç–æ—á–Ω—ñ—à–∏–π –∞—É–¥–∏—Ç–æ—Ä –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –í–°–Ü–• –ø—Ä–æ–±–ª–µ–º –±–æ—Ç–∞
–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏—è–≤–ª–µ–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
"""

import os
import re
import ast
import json
import logging
from pathlib import Path
from typing import Dict, List, Tuple, Set
from collections import defaultdict

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('audit_v5.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UltimateAuditor:
    def __init__(self, project_path: str = "."):
        self.project_path = Path(project_path)
        self.src_path = self.project_path / "src"
        self.issues = defaultdict(list)
        self.stats = defaultdict(int)
        
        # Load localization files
        self.translations = self._load_translations()
        
        # Critical patterns based on real testing
        self.critical_patterns = {
            'missing_main_menu_handler': [
                r'Unknown Action.*main_menu',
                r'callback_data.*main_menu',
                r'action.*main_menu'
            ],
            'missing_callback_handlers': [
                r'Unknown Action.*create_new',
                r'Unknown Action.*advanced', 
                r'Unknown Action.*change_dnd',
                r'–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.*create_new',
                r'–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.*advanced',
                r'–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.*change_dnd'
            ],
            'encoding_issues': [
                r'\?\?',  # Question marks instead of emojis
                r'\\u[0-9a-fA-F]{4}',  # Unicode escape sequences
                r'\\x[0-9a-fA-F]{2}'   # Hex escape sequences
            ],
            'hardcoded_ukrainian': [
                r'["\']‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è["\']',
                r'["\']‚ùå –ü–æ–º–∏–ª–∫–∞["\']', 
                r'["\']‚úÖ [^"\']*["\']',
                r'["\'][üìäüîß‚ö°üíæüÜïüîÑ][^"\']*["\']'
            ],
            'mixed_languages_critical': [
                r'Unknown Action.*[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê]',
                r'[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê].*Unknown Action',
                r'Error.*[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê]',
                r'[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê].*Error'
            ],
            'broken_schedule_handlers': [
                r'schedule.*create_new',
                r'schedule.*advanced',
                r'schedule.*change_dnd'
            ],
            'missing_t_calls': [
                r'reply_text\(["\'][^"\']*[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê][^"\']*["\']',
                r'edit_message_text\(["\'][^"\']*[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê][^"\']*["\']',
                r'send_message\(["\'][^"\']*[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê][^"\']*["\']'
            ]
        }

    def _load_translations(self) -> Dict[str, Dict]:
        """Load translation files"""
        translations = {}
        
        for lang in ['en', 'uk']:
            try:
                trans_path = self.src_path / "localization" / "translations" / f"{lang}.json"
                if trans_path.exists():
                    with open(trans_path, 'r', encoding='utf-8') as f:
                        translations[lang] = json.load(f)
                        logger.info(f"Loaded {lang} translations from {trans_path}")
            except Exception as e:
                logger.error(f"Failed to load {lang} translations: {e}")
                translations[lang] = {}
        
        return translations

    def audit_callback_handlers(self):
        """Audit callback handlers - –Ω–∞–π–∫—Ä–∏—Ç–∏—á–Ω—ñ—à–∞ –ø—Ä–æ–±–ª–µ–º–∞"""
        logger.info("üîç –ê—É–¥–∏—Ç callback handlers...")
        
        callback_file = self.src_path / "bot" / "handlers" / "callback.py"
        if not callback_file.exists():
            self.issues['critical'].append({
                'file': str(callback_file),
                'line': 0,
                'issue': 'callback.py file not found',
                'description': '–§–∞–π–ª callback.py –≤—ñ–¥—Å—É—Ç–Ω—ñ–π - –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞',
                'priority': 'CRITICAL'
            })
            return

        content = callback_file.read_text(encoding='utf-8')
        
        # Check for main_menu handler
        if 'main_menu' not in content or 'def.*main_menu' not in content:
            self.issues['critical'].append({
                'file': str(callback_file),
                'line': 0, 
                'issue': 'missing_main_menu_handler',
                'description': '–í—ñ–¥—Å—É—Ç–Ω—ñ–π handler –¥–ª—è main_menu - –ø—Ä–∏—á–∏–Ω–∞ "Unknown Action: main_menu"',
                'priority': 'CRITICAL',
                'fix': '–î–æ–¥–∞—Ç–∏ async def handle_main_menu_callback'
            })

        # Check for schedule handlers
        missing_schedule_handlers = ['create_new', 'advanced', 'change_dnd']
        for handler in missing_schedule_handlers:
            if f'schedule.*{handler}' not in content:
                self.issues['critical'].append({
                    'file': str(callback_file),
                    'line': 0,
                    'issue': f'missing_schedule_{handler}_handler', 
                    'description': f'–í—ñ–¥—Å—É—Ç–Ω—ñ–π handler –¥–ª—è schedule:{handler}',
                    'priority': 'CRITICAL'
                })

    def audit_encoding_issues(self):
        """Audit encoding and emoji issues"""
        logger.info("üîç –ê—É–¥–∏—Ç encoding issues...")
        
        for py_file in self.src_path.rglob("*.py"):
            try:
                content = py_file.read_text(encoding='utf-8')
                lines = content.split('\n')
                
                for i, line in enumerate(lines, 1):
                    # Check for question marks instead of emojis
                    if re.search(r'\?\?', line) and any(word in line for word in ['Status', 'Directory', 'Session']):
                        self.issues['critical'].append({
                            'file': str(py_file),
                            'line': i,
                            'issue': 'emoji_encoding_broken',
                            'description': f'–ï–º–æ–¥–∑—ñ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è —è–∫ ?? —É —Ä—è–¥–∫—É: {line.strip()}',
                            'priority': 'HIGH',
                            'fix': '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ encoding —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ'
                        })
                        
            except UnicodeDecodeError:
                self.issues['critical'].append({
                    'file': str(py_file),
                    'line': 0,
                    'issue': 'file_encoding_broken',
                    'description': '–§–∞–π–ª –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ encoding',
                    'priority': 'CRITICAL'
                })

    def audit_hardcoded_ukrainian(self):
        """Audit hardcoded Ukrainian strings"""
        logger.info("üîç –ê—É–¥–∏—Ç hardcoded Ukrainian strings...")
        
        for py_file in self.src_path.rglob("*.py"):
            try:
                content = py_file.read_text(encoding='utf-8')
                lines = content.split('\n')
                
                for i, line in enumerate(lines, 1):
                    # Check for hardcoded Ukrainian error messages
                    if re.search(r'["\']‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è["\']', line):
                        self.issues['high'].append({
                            'file': str(py_file),
                            'line': i,
                            'issue': 'hardcoded_ukrainian_error',
                            'description': f'Hardcoded Ukrainian error: {line.strip()}',
                            'priority': 'HIGH',
                            'fix': '–ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ await t(context, user_id, "callback_errors.unknown_action")'
                        })
                        
                    # Check for mixed languages  
                    if re.search(r'Unknown Action.*[–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê]', line):
                        self.issues['critical'].append({
                            'file': str(py_file),
                            'line': i,
                            'issue': 'mixed_languages_in_error',
                            'description': f'Mixed English/Ukrainian: {line.strip()}',
                            'priority': 'CRITICAL'
                        })
                        
            except Exception as e:
                logger.error(f"Error reading {py_file}: {e}")

    def audit_missing_translations(self):
        """Audit missing translation keys"""
        logger.info("üîç –ê—É–¥–∏—Ç missing translations...")
        
        # Required keys based on testing
        required_keys = [
            'callback_errors.unknown_action',
            'callback_errors.action_not_implemented', 
            'schedule.create_new',
            'schedule.advanced',
            'schedule.change_dnd',
            'commands.main_menu.title',
            'buttons.main_menu'
        ]
        
        for lang in ['uk', 'en']:
            translations = self.translations.get(lang, {})
            
            for key in required_keys:
                if not self._get_nested_key(translations, key):
                    self.issues['high'].append({
                        'file': f'src/localization/translations/{lang}.json',
                        'line': 0,
                        'issue': f'missing_translation_key_{lang}',
                        'description': f'–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É: {key}',
                        'priority': 'HIGH',
                        'fix': f'–î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è {key}'
                    })

    def _get_nested_key(self, d: dict, key: str):
        """Get nested dictionary key like 'a.b.c'"""
        keys = key.split('.')
        value = d
        try:
            for k in keys:
                value = value[k]
            return value
        except (KeyError, TypeError):
            return None

    def audit_critical_files_structure(self):
        """Audit critical file structure"""
        logger.info("üîç –ê—É–¥–∏—Ç critical files structure...")
        
        critical_files = [
            'src/bot/handlers/callback.py',
            'src/bot/handlers/command.py', 
            'src/bot/handlers/scheduled_prompts_handler.py',
            'src/localization/translations/uk.json',
            'src/localization/translations/en.json'
        ]
        
        for file_path in critical_files:
            full_path = self.project_path / file_path
            if not full_path.exists():
                self.issues['critical'].append({
                    'file': file_path,
                    'line': 0,
                    'issue': 'critical_file_missing',
                    'description': f'–ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π: {file_path}',
                    'priority': 'CRITICAL'
                })

    def run_comprehensive_audit(self):
        """Run comprehensive audit"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ comprehensive audit v5...")
        
        # Core audits
        self.audit_critical_files_structure()
        self.audit_callback_handlers()
        self.audit_encoding_issues()
        self.audit_hardcoded_ukrainian()
        self.audit_missing_translations()
        
        # Count issues by priority
        for priority in ['critical', 'high', 'medium', 'low']:
            self.stats[priority] = len(self.issues[priority])
        
        self.stats['total'] = sum(self.stats.values())
        
        logger.info(f"üîç Audit complete. Found {self.stats['total']} issues:")
        logger.info(f"  üî¥ Critical: {self.stats['critical']}")
        logger.info(f"  üü† High: {self.stats['high']}")
        logger.info(f"  üü° Medium: {self.stats['medium']}")
        logger.info(f"  üü¢ Low: {self.stats['low']}")

    def generate_report(self):
        """Generate detailed report"""
        report_lines = [
            "# üéØ ULTIMATE AUDIT REPORT v5 - –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
            "",
            f"**–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:** {os.popen('date').read().strip()}",
            "",
            f"**–í—Å—å–æ–≥–æ –ø—Ä–æ–±–ª–µ–º –∑–Ω–∞–π–¥–µ–Ω–æ:** {self.stats['total']}",
            "",
            f"- **üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö (–Ω–µ–≥–∞–π–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏):** {self.stats['critical']}",
            f"- **üü† –í–∏—Å–æ–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É (—Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è):** {self.stats['high']}",
            f"- **üü° –°–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É:** {self.stats['medium']}",
            f"- **üü¢ –ù–∏–∑—å–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É:** {self.stats['low']}",
            "",
            "## üî¥ –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò (–í–ò–ü–†–ê–í–ò–¢–ò –ù–ï–ì–ê–ô–ù–û)",
            ""
        ]
        
        # Add critical issues
        for i, issue in enumerate(self.issues['critical'], 1):
            report_lines.extend([
                f"### C{i}: {issue['issue'].upper().replace('_', ' ')}",
                "",
                f"**–§–∞–π–ª:** `{issue['file']}:{issue['line']}`",
                "",
                f"**–ü—Ä–æ–±–ª–µ–º–∞:** {issue['description']}",
                "",
                f"**–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** {issue['priority']}",
                ""
            ])
            
            if 'fix' in issue:
                report_lines.extend([
                    f"**–†—ñ—à–µ–Ω–Ω—è:** {issue['fix']}",
                    ""
                ])
            
            report_lines.append("")
        
        # Add high priority issues
        if self.issues['high']:
            report_lines.extend([
                "## üü† –í–ò–°–û–ö–ò–ô –ü–†–Ü–û–†–ò–¢–ï–¢",
                ""
            ])
            
            for i, issue in enumerate(self.issues['high'], 1):
                report_lines.extend([
                    f"### H{i}: {issue['issue']}",
                    f"- **–§–∞–π–ª:** `{issue['file']}:{issue['line']}`",
                    f"- **–ü—Ä–æ–±–ª–µ–º–∞:** {issue['description']}",
                    ""
                ])
        
        # Add summary
        report_lines.extend([
            "## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê",
            "",
            f"- –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(list(self.src_path.rglob('*.py')))}",
            f"- –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º: {self.stats['critical']}",
            f"- –ü—Ä–æ–±–ª–µ–º –≤–∏—Å–æ–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É: {self.stats['high']}",
            f"- –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º: {self.stats['total']}",
            "",
            "## üéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò",
            "",
            "1. **–ù–µ–≥–∞–π–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏** (–≤—ñ–¥—Å—É—Ç–Ω—ñ callback handlers)",
            "2. **–í–∏–ø—Ä–∞–≤–∏—Ç–∏ encoding issues** (–µ–º–æ–¥–∑—ñ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è —è–∫ ??)",
            "3. **–ó–∞–º—ñ–Ω–∏—Ç–∏ hardcoded Ukrainian strings** –Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é",
            "4. **–î–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏**",
            "5. **–ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∏**",
            "",
            "üöÄ **–ü—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ü–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–æ—Ç —Å—Ç–∞–Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º!**"
        ])
        
        return "\n".join(report_lines)

def main():
    auditor = UltimateAuditor()
    auditor.run_comprehensive_audit()
    
    # Generate and save report
    report = auditor.generate_report()
    
    report_file = "ultimate_audit_report_v5.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üéâ Ultimate audit v5 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÑ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: {report_file}")
    print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {auditor.stats['total']} –ø—Ä–æ–±–ª–µ–º")
    print(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö: {auditor.stats['critical']}")

if __name__ == "__main__":
    main()