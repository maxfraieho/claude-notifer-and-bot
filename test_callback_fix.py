#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ callback'–∞–º–∏
"""

import os
import sys
import asyncio
from unittest.mock import Mock, AsyncMock, patch

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.config.settings import Settings
from src.di.container import ApplicationContainer


class MockTelegramApp:
    """Mock –¥–ª—è Telegram Application"""
    def __init__(self):
        self.handlers = []
        self.bot_data = {}

    def add_handler(self, handler, group=0):
        """–î–æ–¥–∞—î –æ–±—Ä–æ–±–Ω–∏–∫"""
        self.handlers.append({
            'handler': handler,
            'group': group
        })

    def add_error_handler(self, handler):
        """–î–æ–¥–∞—î –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
        pass


async def test_callback_middleware():
    """–¢–µ—Å—Ç—É—î —á–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è middleware –¥–æ callback'—ñ–≤"""

    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è middleware –¥–ª—è callback'—ñ–≤...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = Settings(
        telegram_token="test_token",
        telegram_bot_username="test_bot",
        approved_directory="/tmp",
        database_url="sqlite:///tmp/test.db"
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = ApplicationContainer()
    await container.initialize(settings)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    dependencies = container.get("bot_dependencies")

    print(f"‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {len(dependencies)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
    print(f"   context_commands: {'‚úÖ' if 'context_commands' in dependencies else '‚ùå'}")

    # –°—Ç–≤–æ—Ä—é—î–º–æ mock –¥–ª—è Telegram app
    mock_app = MockTelegramApp()

    # –Ü–º—ñ—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
    from src.bot.core import ClaudeCodeBot

    # –ü–∞—Ç—á–∏–º–æ Application.builder –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ mock
    with patch('telegram.ext.Application.builder') as mock_builder:
        mock_builder_instance = Mock()
        mock_builder_instance.token.return_value = mock_builder_instance
        mock_builder_instance.persistence.return_value = mock_builder_instance
        mock_builder_instance.connect_timeout.return_value = mock_builder_instance
        mock_builder_instance.read_timeout.return_value = mock_builder_instance
        mock_builder_instance.write_timeout.return_value = mock_builder_instance
        mock_builder_instance.pool_timeout.return_value = mock_builder_instance
        mock_builder_instance.build.return_value = mock_app
        mock_builder.return_value = mock_builder_instance

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
        bot = ClaudeCodeBot(settings, dependencies)

        try:
            await bot.initialize()
            print("‚úÖ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            callback_handlers = [h for h in mock_app.handlers
                               if 'CallbackQueryHandler' in str(type(h['handler']))]

            print(f"\nüìä –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ CallbackQueryHandler'—ñ–≤: {len(callback_handlers)}")

            # –ì—Ä—É–ø—É—î–º–æ –ø–æ group
            groups = {}
            for h in callback_handlers:
                group = h['group']
                if group not in groups:
                    groups[group] = 0
                groups[group] += 1

            print("üìã –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –≥—Ä—É–ø–∞–º:")
            for group in sorted(groups.keys()):
                print(f"   Group {group}: {groups[group]} –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ middleware groups
            middleware_groups = [-4, -3, -2, -1]
            main_handler_group = 0

            middleware_coverage = all(group in groups for group in middleware_groups)
            main_handler_exists = main_handler_group in groups

            print(f"\n‚úÖ Middleware coverage: {'‚úÖ' if middleware_coverage else '‚ùå'}")
            print(f"‚úÖ Main callback handler: {'‚úÖ' if main_handler_exists else '‚ùå'}")

            if middleware_coverage and main_handler_exists:
                print("\nüéâ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –£–°–ü–Ü–®–ù–ï!")
                print("   –í—Å—ñ middleware —Ç–µ–ø–µ—Ä –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –¥–æ callback –∑–∞–ø–∏—Ç—ñ–≤")
                print("   context.bot_data –±—É–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏—Å—è")
            else:
                print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í–ò–†–Ü–®–ï–ù–ê")
                print("   Middleware –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ callback'—ñ–≤")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()


async def main():
    await test_callback_middleware()


if __name__ == "__main__":
    asyncio.run(main())