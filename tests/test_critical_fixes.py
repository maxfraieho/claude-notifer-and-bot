#!/usr/bin/env python3
"""
–ö—Ä–∏—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 21 –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∞—É–¥–∏—Ç—É
–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
"""

import ast
import pytest
import asyncio
import re
from pathlib import Path
from unittest.mock import Mock, patch, AsyncMock
from telegram import Update, Message, User, Chat
from telegram.ext import ContextTypes

# Import our bot modules
import sys
sys.path.append('src')

from bot.handlers import message, command, image_command
from bot.utils.error_handler import safe_user_error, safe_critical_error
from localization.util import t
import json


class TestCriticalSilentFailures:
    """
    –¢–µ—Å—Ç–∏ –¥–ª—è 10 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö silent failure –ø—Ä–æ–±–ª–µ–º
    –°—Ç–∞—Ç—É—Å: üî¥ –ö–†–ò–¢–ò–ß–ù–û
    """

    def test_no_silent_failures_in_production_code(self):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ except: pass –≤ production –∫–æ–¥—ñ
        –ú–∞—î –±–ª–æ–∫—É–≤–∞—Ç–∏ CI/CD —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ silent failures
        """
        production_dirs = [
            Path('src/bot/handlers'),
            Path('src/bot/features'),
            Path('src/bot/core.py'),
            Path('src/security'),
            Path('src/claude')
        ]

        forbidden_patterns = [
            r'except\s*:',  # except:
            r'except\s+Exception\s*:',  # except Exception:
            r'except\s+BaseException\s*:'  # except BaseException:
        ]

        violations = []

        for directory in production_dirs:
            if directory.is_file():
                files_to_check = [directory]
            else:
                files_to_check = directory.rglob('*.py') if directory.exists() else []

            for file_path in files_to_check:
                if file_path.suffix == '.py':
                    content = file_path.read_text(encoding='utf-8')
                    lines = content.split('\n')

                    for line_num, line in enumerate(lines, 1):
                        for pattern in forbidden_patterns:
                            if re.search(pattern, line):
                                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î pass –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ä—è–¥–∫–∞—Ö
                                next_lines = lines[line_num:line_num+3]
                                if any('pass' in next_line.strip() for next_line in next_lines):
                                    violations.append({
                                        'file': str(file_path),
                                        'line': line_num,
                                        'code': line.strip(),
                                        'pattern': pattern
                                    })

        if violations:
            error_msg = "üö® –ö–†–ò–¢–ò–ß–ù–Ü SILENT FAILURES –ó–ù–ê–ô–î–ï–ù–û:\n"
            for violation in violations[:10]:  # Show first 10
                error_msg += f"- {violation['file']}:{violation['line']} -> {violation['code']}\n"
            if len(violations) > 10:
                error_msg += f"... —Ç–∞ —â–µ {len(violations) - 10} –≤–∏–ø–∞–¥–∫—ñ–≤\n"
            error_msg += "\n‚ùå CI/CD –ü–û–í–ò–ù–ï–ù –ë–õ–û–ö–£–í–ê–¢–ò –¶–ï!"

            pytest.fail(error_msg)

    async def test_message_handler_error_handling_line_368(self):
        """
        –¢–µ—Å—Ç –¥–ª—è src/bot/handlers/message.py:368
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤ –∑–∞–º—ñ—Å—Ç—å silent failure
        """
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ mock objects
        update = Mock(spec=Update)
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        update.effective_user = Mock(spec=User)
        update.effective_user.id = 12345
        update.message = Mock(spec=Message)
        update.message.reply_text = AsyncMock()

        # Mock —â–æ –≤–∏–∫–ª–∏–∫–∞—î exception
        with patch('src.bot.handlers.message.some_risky_operation', side_effect=Exception("Test error")):
            with patch('src.bot.utils.error_handler.safe_user_error') as mock_safe_error:
                # –í–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                try:
                    await message.handle_text_message(update, context)
                except Exception as e:
                    # –ú–∞—î –±—É—Ç–∏ proper error handling, –Ω–µ silent failure
                    assert mock_safe_error.called or "Test error" in str(e)
                    # –ù–ï –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ

    async def test_image_command_error_handling_line_294(self):
        """
        –¢–µ—Å—Ç –¥–ª—è src/bot/handlers/image_command.py:294
        –ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ç–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤ –≤ image processing
        """
        update = Mock(spec=Update)
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)

        # –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–º–∏–ª–∫–∏ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        with patch('src.bot.handlers.image_command.process_image', side_effect=Exception("Image processing failed")):
            with patch('src.bot.utils.error_handler.safe_user_error') as mock_safe_error:
                try:
                    await image_command.handle_image_processing(update, context)
                    # –ú–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è proper error handling
                    assert mock_safe_error.called
                except Exception:
                    # Exception –º–æ–∂–µ –±—É—Ç–∏, –∞–ª–µ –Ω–µ silent failure
                    pass

    def test_error_handling_completeness(self):
        """
        –ú–µ—Ç–∞-—Ç–µ—Å—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –º–∞—é—Ç—å proper error handling
        """
        handler_files = [
            'src/bot/handlers/message.py',
            'src/bot/handlers/command.py',
            'src/bot/handlers/image_command.py',
            'src/bot/handlers/callback.py'
        ]

        missing_error_handling = []

        for file_path in handler_files:
            if Path(file_path).exists():
                content = Path(file_path).read_text()

                # –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ async def —Ñ—É–Ω–∫—Ü—ñ—ó
                tree = ast.parse(content)
                for node in ast.walk(tree):
                    if isinstance(node, ast.AsyncFunctionDef):
                        func_name = node.name

                        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î try/except –±–ª–æ–∫–∏
                        has_try_except = any(isinstance(child, ast.Try) for child in ast.walk(node))

                        if not has_try_except and func_name.startswith('handle_'):
                            missing_error_handling.append(f"{file_path}:{func_name}")

        if missing_error_handling:
            pytest.fail(f"–í—ñ–¥—Å—É—Ç–Ω—î error handling –≤: {missing_error_handling}")


class TestHardcodedUIElements:
    """
    –¢–µ—Å—Ç–∏ –¥–ª—è 8 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö hardcoded UI –ø—Ä–æ–±–ª–µ–º
    –°—Ç–∞—Ç—É—Å: üü† –í–ò–°–û–ö–ò–ô
    """

    def test_no_hardcoded_button_texts_in_code(self):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ hardcoded —Ç–µ–∫—Å—Ç—ñ–≤ –∫–Ω–æ–ø–æ–∫
        """
        critical_hardcoded_patterns = [
            'üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
            'üìä –Ü—Å—Ç–æ—Ä—ñ—è',
            'üîÑ –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É',
            'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è',
            'üìã –ó—ñ —à–∞–±–ª–æ–Ω—É',
            'üîô –ù–∞–∑–∞–¥',
            '‚ûï –î–æ–¥–∞—Ç–∏',
            'üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
            '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
            'üîÑ –û–Ω–æ–≤–∏—Ç–∏',
            'üåô –ó–º—ñ–Ω–∏—Ç–∏ DND',
            '‚ö° –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
            'üìã –î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏'
        ]

        source_files = list(Path('src').rglob('*.py'))
        violations = []

        for file_path in source_files:
            content = file_path.read_text(encoding='utf-8')

            for pattern in critical_hardcoded_patterns:
                if pattern in content:
                    lines = content.split('\n')
                    for line_num, line in enumerate(lines, 1):
                        if pattern in line:
                            violations.append({
                                'file': str(file_path),
                                'line': line_num,
                                'pattern': pattern,
                                'code': line.strip()
                            })

        if violations:
            error_msg = "üö® HARDCODED UI –¢–ï–ö–°–¢–ò –ó–ù–ê–ô–î–ï–ù–û:\n"
            for violation in violations:
                error_msg += f"- {violation['file']}:{violation['line']} -> {violation['pattern']}\n"
            error_msg += "\n‚ùå –í–°–Ü UI –¢–ï–ö–°–¢–ò –ú–ê–Æ–¢–¨ –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–Æ!"

            pytest.fail(error_msg)

    async def test_all_inline_keyboard_buttons_use_localization(self):
        """
        –¢–µ—Å—Ç —â–æ –≤—Å—ñ InlineKeyboardButton –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é t()
        """
        source_files = list(Path('src/bot').rglob('*.py'))
        violations = []

        for file_path in source_files:
            content = file_path.read_text(encoding='utf-8')

            # –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ InlineKeyboardButton –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            inline_button_pattern = r'InlineKeyboardButton\s*\(\s*["\'][^"\']*["\']'
            matches = re.finditer(inline_button_pattern, content)

            for match in matches:
                button_text = match.group(0)
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è await t() –∞–±–æ t()
                if 'await t(' not in button_text and 't(' not in button_text:
                    line_num = content[:match.start()].count('\n') + 1
                    violations.append({
                        'file': str(file_path),
                        'line': line_num,
                        'code': button_text
                    })

        if violations:
            error_msg = "üö® –ö–ù–û–ü–ö–ò –ë–ï–ó –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–á:\n"
            for violation in violations[:5]:  # Show first 5
                error_msg += f"- {violation['file']}:{violation['line']}\n"
            pytest.fail(error_msg)

    def test_localization_keys_completeness(self):
        """
        –¢–µ—Å—Ç –ø–æ–≤–Ω–æ—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤
        """
        required_button_keys = [
            'buttons.settings',
            'buttons.history',
            'buttons.toggle_system',
            'buttons.create_task',
            'buttons.from_template',
            'buttons.back',
            'buttons.add',
            'buttons.edit',
            'buttons.update',
            'buttons.change_dnd',
            'buttons.detailed_logs'
        ]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
        uk_file = Path('src/localization/translations/uk.json')
        en_file = Path('src/localization/translations/en.json')

        missing_keys = []

        for file_path in [uk_file, en_file]:
            if file_path.exists():
                import json
                with open(file_path, 'r', encoding='utf-8') as f:
                    translations = json.load(f)

                for key in required_button_keys:
                    key_parts = key.split('.')
                    current = translations

                    try:
                        for part in key_parts:
                            current = current[part]
                    except KeyError:
                        missing_keys.append(f"{file_path.name}:{key}")

        if missing_keys:
            pytest.fail(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ –∫–ª—é—á—ñ: {missing_keys}")


class TestErrorHandlerCoverage:
    """
    –¢–µ—Å—Ç–∏ –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö error handlers (2 –ø—Ä–æ–±–ª–µ–º–∏)
    –°—Ç–∞—Ç—É—Å: üî¥ –ö–†–ò–¢–ò–ß–ù–û
    """

    async def test_all_critical_operations_have_error_handlers(self):
        """
        –¢–µ—Å—Ç —â–æ –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –º–∞—é—Ç—å error handlers
        """
        critical_operations = [
            'claude_cli_call',
            'file_read_operation',
            'database_operation',
            'telegram_api_call',
            'image_processing',
            'yaml_parsing',
            'svg_generation'
        ]

        # –ú–æ–∫—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è error handling
        for operation in critical_operations:
            with patch(f'src.bot.{operation}', side_effect=Exception(f"{operation} failed")):
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —î proper error handling
                # –¶–µ –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ç–µ—Å—Ç–∞—Ö –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
                pass

    async def test_fallback_mechanisms_exist(self):
        """
        –¢–µ—Å—Ç –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ fallback –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤
        """
        # –¢–µ—Å—Ç fallback Claude CLI -> SDK
        with patch('src.claude.integration.call_claude_cli', side_effect=Exception("CLI failed")):
            with patch('src.claude.sdk_integration.call_claude_sdk') as mock_sdk:
                # –ú–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ SDK
                mock_sdk.return_value = "success"
                # –í–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Claude
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –≤—ñ–¥–±—É–≤—Å—è fallback

    async def test_graceful_degradation(self):
        """
        –¢–µ—Å—Ç graceful degradation –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
        """
        # –¢–µ—Å—Ç —â–æ –∫–æ–ª–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å
        with patch('src.bot.features.dracon_renderer.render_svg', side_effect=Exception("Render failed")):
            # –ú–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∏–π fallback
            pass


class TestSecurityVulnerabilities:
    """
    –¢–µ—Å—Ç –¥–ª—è 1 security –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ
    –°—Ç–∞—Ç—É—Å: üî¥ –ö–†–ò–¢–ò–ß–ù–û
    """

    async def test_security_events_not_silenced(self):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: Security –ø–æ–¥—ñ—ó –Ω–µ –º–∞—Å–∫—É—é—Ç—å—Å—è silent failures
        """
        security_events = [
            'unauthorized_access_attempt',
            'path_traversal_attempt',
            'injection_attempt',
            'rate_limit_violation',
            'token_validation_failure'
        ]

        for event in security_events:
            with patch('src.security.audit.log_security_event') as mock_log:
                # –°–∏–º—É–ª—è—Ü—ñ—è security –ø–æ–¥—ñ—ó
                try:
                    # –í–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é —â–æ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ security event
                    pass
                except Exception:
                    # Security –ø–æ–¥—ñ—ó –ú–ê–Æ–¢–¨ –±—É—Ç–∏ –∑–∞–ª–æ–≥–æ–≤–∞–Ω—ñ, –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ exception
                    assert mock_log.called, f"Security event {event} –Ω–µ –±—É–≤ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∏–π!"

    async def test_security_exception_proper_handling(self):
        """
        –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ security –≤–∏–Ω—è—Ç–∫—ñ–≤
        """
        from src.security.validators import SecurityValidator

        validator = SecurityValidator()

        # –¢–µ—Å—Ç —â–æ security –≤–∏–Ω—è—Ç–∫–∏ –Ω–µ —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è
        with patch.object(validator, 'validate_path', side_effect=Exception("Security violation")):
            with pytest.raises(Exception):
                # Security –≤–∏–Ω—è—Ç–∫–∏ –ù–ï –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ silent
                await validator.validate_file_access('/etc/passwd')

    def test_audit_trail_completeness(self):
        """
        –¢–µ—Å—Ç –ø–æ–≤–Ω–æ—Ç–∏ audit trail –¥–ª—è security –ø–æ–¥—ñ–π
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –≤—Å—ñ security-sensitive –æ–ø–µ—Ä–∞—Ü—ñ—ó –ª–æ–≥—É—é—Ç—å—Å—è
        security_sensitive_functions = [
            'authenticate_user',
            'validate_file_path',
            'check_rate_limit',
            'validate_command_access'
        ]

        # –ö–æ–∂–Ω–∞ –∑ —Ü–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ audit logging
        for func_name in security_sensitive_functions:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î —ñ –º–∞—î audit logging
            pass


class TestProductionReadiness:
    """
    –ú–µ—Ç–∞-—Ç–µ—Å—Ç–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ production
    """

    def test_all_21_critical_issues_addressed(self):
        """
        –ú–ï–¢–ê-–¢–ï–°–¢: –í—Å—ñ 21 –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ñ
        """
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏
        critical_test_results = []

        # 1. Silent failures
        try:
            self.test_no_silent_failures_in_production_code()
            critical_test_results.append("‚úÖ Silent failures: FIXED")
        except Exception as e:
            critical_test_results.append(f"‚ùå Silent failures: {str(e)}")

        # 2. Hardcoded UI
        try:
            hardcoded_tester = TestHardcodedUIElements()
            hardcoded_tester.test_no_hardcoded_button_texts_in_code()
            critical_test_results.append("‚úÖ Hardcoded UI: FIXED")
        except Exception as e:
            critical_test_results.append(f"‚ùå Hardcoded UI: {str(e)}")

        # 3. Error handlers
        critical_test_results.append("‚ö†Ô∏è Error handlers: Needs implementation")

        # 4. Security
        critical_test_results.append("‚ö†Ô∏è Security: Needs verification")

        # –ó–≤—ñ—Ç
        report = "\n".join(critical_test_results)
        failed_tests = [r for r in critical_test_results if r.startswith("‚ùå")]

        if failed_tests:
            pytest.fail(f"–ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò –ù–ï –í–ò–†–Ü–®–ï–ù–Ü:\n{report}")

    def test_code_quality_metrics(self):
        """
        –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É
        """
        metrics = {
            'silent_failures': 0,  # –ú–∞—î –±—É—Ç–∏ 0
            'hardcoded_ui_elements': 0,  # –ú–∞—î –±—É—Ç–∏ 0
            'missing_error_handlers': 0,  # –ú–∞—î –±—É—Ç–∏ 0
            'security_vulnerabilities': 0  # –ú–∞—î –±—É—Ç–∏ 0
        }

        # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
        # actual_metrics = calculate_quality_metrics()

        # for metric, expected in metrics.items():
        #     assert actual_metrics[metric] == expected, f"{metric}: –æ—á—ñ–∫—É–≤–∞–ª–∏ {expected}, –æ—Ç—Ä–∏–º–∞–ª–∏ {actual_metrics[metric]}"

    async def test_error_recovery_functionality(self):
        """
        –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫
        """
        # –°–∏–º—É–ª—è—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ recovery
        error_scenarios = [
            'network_timeout',
            'file_not_found',
            'permission_denied',
            'invalid_input',
            'external_service_unavailable'
        ]

        for scenario in error_scenarios:
            # –ö–æ–∂–µ–Ω —Å—Ü–µ–Ω–∞—Ä—ñ–π –º–∞—î –º–∞—Ç–∏ proper recovery mechanism
            recovery_successful = await self._test_error_recovery(scenario)
            assert recovery_successful, f"Recovery failed for scenario: {scenario}"

    async def _test_error_recovery(self, scenario: str) -> bool:
        """–î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è recovery"""
        # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è specific recovery —Ç–µ—Å—Ç—ñ–≤
        return True  # Placeholder


class TestCriticalLocalization:
    """
    –®–≤–∏–¥–∫—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
    –°—Ç–∞—Ç—É—Å: üü† –í–ò–°–û–ö–ê –∫—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å
    """

    @pytest.fixture
    def project_root(self):
        """Get project root directory"""
        return Path(__file__).parent.parent

    def test_zero_hardcoded_ui_elements_critical(self, project_root):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: Zero tolerance –¥–æ hardcoded UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        –ú–∞—î –±–ª–æ–∫—É–≤–∞—Ç–∏ CI/CD —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ hardcoded UI
        """
        critical_files = [
            project_root / "src" / "bot" / "handlers" / "dnd_prompts.py",
            project_root / "src" / "bot" / "handlers" / "command.py",
            project_root / "src" / "bot" / "handlers" / "callback.py"
        ]

        # –ù–µ–±–µ–∑–ø–µ—á–Ω—ñ patterns –¥–ª—è –∫–Ω–æ–ø–æ–∫
        dangerous_patterns = [
            r'InlineKeyboardButton\(\s*["\']([^"\']*[üîßüìäüîÑüìùüìãüîô‚ûï‚öôÔ∏èüåô‚ö°üìÅüÜïüíæ‚ùìüè†üåê‚¨ÜÔ∏è]+[^"\']*)["\']',
            r'InlineKeyboardButton\(\s*["\']([^"\']*(?:–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è|Settings|–°—Ç–≤–æ—Ä–∏—Ç–∏|Create|–î–æ–¥–∞—Ç–∏|Add|–†–µ–¥–∞–≥—É–≤–∞—Ç–∏|Edit)[^"\']*)["\']',
        ]

        violations = []

        for file_path in critical_files:
            if not file_path.exists():
                continue

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                for line_num, line in enumerate(content.split('\n'), 1):
                    # Skip —è–∫—â–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
                    if 'await t(' in line or 'get_localized_text' in line:
                        continue

                    for pattern in dangerous_patterns:
                        matches = re.finditer(pattern, line)
                        for match in matches:
                            violations.append({
                                'file': str(file_path.name),
                                'line': line_num,
                                'text': match.group(1),
                                'severity': 'CRITICAL'
                            })

            except Exception as e:
                continue

        if violations:
            violation_msg = "\n".join([
                f"‚ùå {v['file']}:{v['line']} - HARDCODED: '{v['text']}'"
                for v in violations
            ])
            assert False, f"üö® CRITICAL: {len(violations)} hardcoded UI elements found:\n{violation_msg}"

    def test_translation_files_exist_critical(self, project_root):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: –§–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –º–∞—é—Ç—å —ñ—Å–Ω—É–≤–∞—Ç–∏
        """
        translations_dir = project_root / "src" / "localization" / "translations"

        assert translations_dir.exists(), "‚ùå CRITICAL: Translations directory missing"

        required_files = ["uk.json", "en.json"]
        for file_name in required_files:
            file_path = translations_dir / file_name
            assert file_path.exists(), f"‚ùå CRITICAL: Translation file {file_name} missing"

    def test_critical_localization_keys_exist(self, project_root):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: –ö—Ä–∏—Ç–∏—á–Ω—ñ –∫–ª—é—á—ñ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—é—Ç—å —ñ—Å–Ω—É–≤–∞—Ç–∏
        """
        translations_dir = project_root / "src" / "localization" / "translations"
        uk_file = translations_dir / "uk.json"

        assert uk_file.exists(), "‚ùå CRITICAL: UK translation file missing"

        with open(uk_file, 'r', encoding='utf-8') as f:
            uk_data = json.load(f)

        # –ö—Ä–∏—Ç–∏—á–Ω—ñ –∫–ª—é—á—ñ —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –ø—ñ—Å–ª—è –Ω–∞—à–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        critical_keys = [
            ("buttons", "new_session"),
            ("buttons", "continue"),
            ("buttons", "settings"),
            ("buttons", "create_prompt"),
            ("buttons", "prompts_list"),
            ("buttons", "go_up"),
            ("buttons", "refresh"),
            ("buttons", "projects")
        ]

        missing_keys = []
        for section, key in critical_keys:
            if section not in uk_data or key not in uk_data[section]:
                missing_keys.append(f"{section}.{key}")

        if missing_keys:
            assert False, f"‚ùå CRITICAL: Missing localization keys: {missing_keys}"

    def test_localization_imports_in_handlers(self, project_root):
        """
        –ö–†–ò–¢–ò–ß–ù–ò–ô –¢–ï–°–¢: Handlers –º–∞—é—Ç—å –º–∞—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ imports
        """
        handler_files = [
            project_root / "src" / "bot" / "handlers" / "dnd_prompts.py",
            project_root / "src" / "bot" / "handlers" / "command.py"
        ]

        missing_imports = []

        for file_path in handler_files:
            if not file_path.exists():
                continue

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ imports
                has_localization_import = (
                    'from ...localization.util import' in content or
                    'from ..localization.util import' in content
                )

                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ñ–∞–π–ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î InlineKeyboardButton
                uses_keyboard = 'InlineKeyboardButton(' in content

                if uses_keyboard and not has_localization_import:
                    missing_imports.append(file_path.name)

            except Exception:
                continue

        if missing_imports:
            assert False, f"‚ùå CRITICAL: Files missing localization imports: {missing_imports}"


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
    pytest.main([
        __file__,
        "-v",
        "--tb=short",
        "--strict-markers",
        "--strict-config"
    ])