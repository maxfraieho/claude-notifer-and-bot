#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Claude CLI
"""

import os
import sys
import asyncio
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.bot.features.context_commands import ContextCommands
from src.claude.context_memory import ContextMemoryManager
from src.storage.facade import Storage
from src.config.settings import Settings


class MockTelegramUpdate:
    """Mock –æ–±'—î–∫—Ç –¥–ª—è Telegram Update"""

    def __init__(self, user_id=12345):
        self.effective_user = Mock()
        self.effective_user.id = user_id

        self.message = AsyncMock()
        self.message.reply_text = AsyncMock()
        self.message.reply_document = AsyncMock()

        self.callback_query = AsyncMock()
        self.callback_query.data = ""
        self.callback_query.edit_message_text = AsyncMock()
        self.callback_query.answer = AsyncMock()
        self.callback_query.message = self.message


class MockTelegramContext:
    """Mock –æ–±'—î–∫—Ç –¥–ª—è Telegram Context"""

    def __init__(self):
        self.bot_data = {
            "approved_directory": "/tmp/test_project"
        }
        self.user_data = {}


async def test_context_buttons():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–π –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""

    print("üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ mock –æ–±'—î–∫—Ç–∏
    mock_storage = Mock(spec=Storage)
    mock_storage.context = Mock()

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ mock –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mock_storage.context.get_context_stats = AsyncMock(return_value={
        'total_entries': 15,
        'sessions_count': 3,
        'first_entry': '2024-09-20T10:00:00',
        'last_entry': '2024-09-25T15:30:00',
        'high_importance': 5,
        'medium_importance': 8,
        'low_importance': 2
    })

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ mock –¥–ª—è –ø–æ—à—É–∫—É
    mock_storage.context.search_context_entries = AsyncMock(return_value=[])
    mock_storage.context.get_recent_context_entries = AsyncMock(return_value=[])

    mock_context_memory = Mock(spec=ContextMemoryManager)
    mock_context_memory.get_user_context = AsyncMock()
    mock_context_memory.get_user_context.return_value = Mock()
    mock_context_memory.get_user_context.return_value.last_updated = datetime.now()

    mock_context_memory.export_context = AsyncMock(return_value={
        "entries": [
            {"timestamp": "2024-09-25T15:30:00", "content": "test message", "type": "user"},
        ]
    })
    mock_context_memory.clear_context = AsyncMock(return_value=True)

    # –°—Ç–≤–æ—Ä—é—î–º–æ ContextCommands
    context_commands = ContextCommands(mock_storage, mock_context_memory)

    # –°—Ç–≤–æ—Ä—é—î–º–æ mock –æ–±'—î–∫—Ç–∏ –¥–ª—è Telegram
    update = MockTelegramUpdate()
    context = MockTelegramContext()

    print("‚úÖ Mock –æ–±'—î–∫—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")

    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    print("\nüìä –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    try:
        await context_commands.handle_context_status(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ reply_text
        assert update.message.reply_text.called, "reply_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"

        call_args = update.message.reply_text.call_args
        message_text = call_args[0][0]  # –ü–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        assert "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ—ó –ø–∞–º'—è—Ç—ñ" in message_text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "15" in message_text, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        assert "üì§ –ï–∫—Å–ø–æ—Ä—Ç" in str(call_args), "–ö–Ω–æ–ø–∫–∞ '–ï–∫—Å–ø–æ—Ä—Ç' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        assert "üîç –ü–æ—à—É–∫" in str(call_args), "–ö–Ω–æ–ø–∫–∞ '–ü–æ—à—É–∫' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        assert "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏" in str(call_args), "–ö–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

        print("‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ —Å—Ç–∞—Ç—É—Å—É: {e}")
        return False

    # –¢–µ—Å—Ç 2: –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    print("\nüì§ –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    try:
        await context_commands.handle_context_export(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ reply_document
        assert update.message.reply_document.called, "reply_document –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"

        print("‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
        return False

    # –¢–µ—Å—Ç 3: –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–∑–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)
    print("\nüóëÔ∏è –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Ç—É –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    try:
        await context_commands.handle_context_clear(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ reply_text –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        assert update.message.reply_text.called, "reply_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"

        call_args = update.message.reply_text.call_args
        message_text = call_args[0][0]

        assert "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è" in message_text, "–ó–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "‚úÖ –¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏" in str(call_args), "–ö–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

        print("‚úÖ –ó–∞–ø–∏—Ç –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
        return False

    # –¢–µ—Å—Ç 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è
    print("\n‚úÖ –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è...")
    try:
        await context_commands.handle_context_clear_confirm(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ edit_message_text
        assert update.callback_query.edit_message_text.called, "edit_message_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"

        call_args = update.callback_query.edit_message_text.call_args
        message_text = call_args[0][0]

        assert "—É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ" in message_text, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        print("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è: {e}")
        return False

    # –¢–µ—Å—Ç 5: –ü–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    print("\nüîç –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—à—É–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ...")
    try:
        await context_commands.handle_context_search(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ reply_text –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
        assert update.message.reply_text.called, "reply_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"

        call_args = update.message.reply_text.call_args
        message_text = call_args[0][0]

        assert "–ü–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ" in message_text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—à—É–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "awaiting_context_search" in context.user_data, "–°—Ç–∞–Ω –ø–æ—à—É–∫—É –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        print("‚úÖ –ü–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –ø–æ—à—É–∫—É: {e}")
        return False

    # –¢–µ—Å—Ç 6: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    print("\nüìã –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    try:
        await context_commands.handle_context_list(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ reply_text
        assert update.message.reply_text.called, "reply_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"

        call_args = update.message.reply_text.call_args
        message_text = call_args[0][0]

        assert "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É" in message_text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        print("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ —Å–ø–∏—Å–∫—É: {e}")
        return False

    # –¢–µ—Å—Ç 7: Callback handlers
    print("\nüîÑ –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ callback...")
    callback_tests = [
        ("context_export", "handle_context_export"),
        ("context_clear", "handle_context_clear"),
        ("context_search", "handle_context_search"),
        ("context_list", "handle_context_list"),
        ("context_close", "–∑–∞–∫—Ä–∏—Ç–∏"),
    ]

    for callback_data, expected_behavior in callback_tests:
        try:
            update.callback_query.data = callback_data
            await context_commands.handle_callback_query(update, context)
            print(f"  ‚úÖ Callback '{callback_data}' –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ callback '{callback_data}': {e}")
            return False

    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("  ‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - –ø—Ä–∞—Ü—é—î")
    print("  ‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - –ø—Ä–∞—Ü—é—î")
    print("  ‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - –ø—Ä–∞—Ü—é—î")
    print("  ‚úÖ –ü–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ - –ø—Ä–∞—Ü—é—î")
    print("  ‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - –ø—Ä–∞—Ü—é—î")
    print("  ‚úÖ Callback –æ–±—Ä–æ–±–Ω–∏–∫–∏ - –ø—Ä–∞—Ü—é—é—Ç—å")

    return True


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""

    print("ü§ñ –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Claude CLI")
    print("=" * 50)

    success = await test_context_buttons()

    if success:
        print("\nüéØ –í–ò–°–ù–û–í–û–ö: –í—Å—ñ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
        print("üìù –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")
    else:
        print("\n‚ùå –í–ò–°–ù–û–í–û–ö: –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º!")
        print("üîß –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())