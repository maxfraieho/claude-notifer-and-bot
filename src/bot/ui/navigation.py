"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è Claude Bot
"""

from typing import List, Dict, Any, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ breadcrumbs —Ç–∞ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º"""

    def __init__(self):
        self.navigation_stack = []
        self.menu_groups = {
            "main": {
                "title": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                "buttons": [
                    ("üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É", "action:start_coding"),
                    ("üìã –®–≤–∏–¥–∫—ñ –¥—ñ—ó", "action:quick_actions"),
                    ("üìä –°—Ç–∞—Ç—É—Å", "action:status"),
                    ("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "action:settings")
                ]
            },
            "quick_actions": {
                "title": "‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó",
                "buttons": [
                    ("üìÅ –§–∞–π–ª–∏", "quick:files"),
                    ("üîç –ü–æ—à—É–∫", "quick:search"),
                    ("üíæ Git", "quick:git"),
                    ("üß™ –¢–µ—Å—Ç–∏", "quick:tests")
                ]
            },
            "file_operations": {
                "title": "üìÅ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª–∞–º–∏",
                "buttons": [
                    ("üìñ –ß–∏—Ç–∞—Ç–∏", "file:read"),
                    ("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "file:edit"),
                    ("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏", "file:create"),
                    ("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", "file:delete")
                ]
            }
        }

    def get_main_menu(self) -> InlineKeyboardMarkup:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        return self.create_menu("main")

    def create_menu(self, group_key: str, add_navigation: bool = True) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏"""
        if group_key not in self.menu_groups:
            return InlineKeyboardMarkup([[]])

        group = self.menu_groups[group_key]
        keyboard = []

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–∏
        for text, callback_data in group["buttons"]:
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

        # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
        if add_navigation:
            nav_row = []

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if len(self.navigation_stack) > 0:
                nav_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="nav:back"))

            # –ö–Ω–æ–ø–∫–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
            if group_key != "main":
                nav_row.append(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ", callback_data="nav:main"))

            if nav_row:
                keyboard.append(nav_row)

        return InlineKeyboardMarkup(keyboard)

    def push_navigation(self, current_menu: str):
        """–î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é –¥–æ —Å—Ç–µ–∫—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        self.navigation_stack.append(current_menu)

    def pop_navigation(self) -> Optional[str]:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é"""
        if self.navigation_stack:
            return self.navigation_stack.pop()
        return None

    def get_breadcrumb(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ breadcrumb –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        if not self.navigation_stack:
            return "üè†"

        breadcrumb = "üè†"
        for menu in self.navigation_stack:
            if menu in self.menu_groups:
                title = self.menu_groups[menu]["title"]
                breadcrumb += f" ‚Üí {title}"

        return breadcrumb

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
nav_manager = NavigationManager()
