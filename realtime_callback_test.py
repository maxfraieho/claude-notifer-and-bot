#!/usr/bin/env python3
"""
Real-time Callback Test - –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ callback'–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
"""
import asyncio
import json
import signal
import sys
import os
from datetime import datetime

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
stop_monitoring = False

def signal_handler(signum, frame):
    global stop_monitoring
    print(f"\nüõë –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    stop_monitoring = True

async def monitor_bot_activity():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ"""

    print("üîç –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ callback'—ñ–≤...")
    print("üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
    print("   1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /context –≤ Telegram –±–æ—Ç—É")
    print("   2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫")
    print("   3. –î–∏–≤—ñ—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—É—Ç")
    print("   4. Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n")

    # –ü–∞—Ç—á–∏–º–æ callback handler –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    try:
        from src.bot.handlers.callback import handle_callback_query
        original_handler = handle_callback_query

        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        async def logged_callback_handler(update, context):
            print(f"üéØ CALLBACK –ü–ï–†–ï–•–û–ü–õ–ï–ù–û: {datetime.now()}")
            print(f"   üìû Data: {update.callback_query.data}")
            print(f"   üë§ User: {update.callback_query.from_user.id}")
            print(f"   üîß bot_data keys: {list(context.bot_data.keys())}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î context_commands
            if 'context_commands' in context.bot_data:
                print(f"   ‚úÖ context_commands –¥–æ—Å—Ç—É–ø–Ω—ñ: {type(context.bot_data['context_commands'])}")
            else:
                print(f"   ‚ùå context_commands –≤—ñ–¥—Å—É—Ç–Ω—ñ")
                print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–ª—é—á—ñ: {list(context.bot_data.keys())}")

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π handler
            try:
                result = await original_handler(update, context)
                print(f"   ‚úÖ Handler –≤–∏–∫–æ–Ω–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")
                return result
            except Exception as e:
                print(f"   ‚ùå Handler –ø–æ–º–∏–ª–∫–∞: {e}")
                raise

        # –ó–∞–º—ñ–Ω—é—î–º–æ handler
        import src.bot.handlers.callback
        src.bot.handlers.callback.handle_callback_query = logged_callback_handler
        print("‚úÖ Callback handler –ø–∞—Ç—á–µ–Ω–æ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ç—á—É–≤–∞–Ω–Ω—è handler: {e}")
        return

    # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ
    print("üëÅÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π. –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ Telegram...\n")

    try:
        while not stop_monitoring:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print(f"\nüõë –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")

    print("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É
    signal.signal(signal.SIGINT, signal_handler)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    try:
        asyncio.run(monitor_bot_activity())
    except KeyboardInterrupt:
        print("\nüëã –í–∏—Ö—ñ–¥")