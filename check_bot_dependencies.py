#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞
"""

import os
import sys
import asyncio

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))


async def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""

    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞...")

    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–æ–¥—É–ª—ñ
    from src.config.settings import Settings
    from src.di.container import ApplicationContainer

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = Settings(
        telegram_token="test_token",
        telegram_bot_username="test_bot",
        approved_directory="/tmp",
        database_url="sqlite:///tmp/test.db"
    )

    print("\nüì¶ –°—Ç–≤–æ—Ä—é—î–º–æ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
    container = ApplicationContainer()

    try:
        await container.initialize(settings)
        print("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å context_commands
        if container.has("context_commands"):
            context_commands = container.get("context_commands")
            print(f"‚úÖ context_commands –∑–Ω–∞–π–¥–µ–Ω–æ: {type(context_commands).__name__}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥ handle_callback_query
            if hasattr(context_commands, 'handle_callback_query'):
                print("‚úÖ –ú–µ—Ç–æ–¥ handle_callback_query —ñ—Å–Ω—É—î")
            else:
                print("‚ùå –ú–µ—Ç–æ–¥ handle_callback_query –ù–ï —ñ—Å–Ω—É—î")

        else:
            print("‚ùå context_commands –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞
        if container.has("bot_dependencies"):
            bot_deps = container.get("bot_dependencies")
            print(f"\nüìã –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞:")

            for key, value in bot_deps.items():
                print(f"  - {key}: {type(value).__name__}")

            if "context_commands" in bot_deps:
                print("‚úÖ context_commands –≤–∫–ª—é—á–µ–Ω–æ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞")
            else:
                print("‚ùå context_commands –ù–ï –≤–∫–ª—é—á–µ–Ω–æ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞")

        else:
            print("‚ùå bot_dependencies –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
        if container.has("bot"):
            bot = container.get("bot")
            print(f"\nü§ñ –ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {type(bot).__name__}")
        else:
            print("‚ùå –ë–æ—Ç –ù–ï —Å—Ç–≤–æ—Ä–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()

    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ context_commands –≤–∫–ª—é—á–µ–Ω–æ –≤ bot_dependencies")
    print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ _inject_deps –º–µ—Ç–æ–¥ –≤ ClaudeCodeBot")
    print("3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é CallbackQueryHandler")


async def main():
    await check_dependencies()


if __name__ == "__main__":
    asyncio.run(main())