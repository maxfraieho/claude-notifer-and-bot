#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –ø—Ä–æ—Ü–µ—Å—ñ–≤
"""

import os
import sys
import asyncio

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_bot_initialization():
    """–¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞ –∑ callback –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏"""

    print("üîç –¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞...")

    from src.config.settings import Settings
    from src.di.container import ApplicationContainer
    from src.bot.core import ClaudeCodeBot

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = Settings(
        telegram_token="1234567890:FAKE_TOKEN_FOR_TESTING",
        telegram_bot_username="test_bot",
        approved_directory="/tmp",
        database_url="sqlite:///data/bot.db"
    )

    print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ")

    # DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = ApplicationContainer()
    await container.initialize(settings)
    dependencies = container.get("bot_dependencies")

    print("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    print(f"   –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {len(dependencies)}")
    print(f"   context_commands: {'‚úÖ' if 'context_commands' in dependencies else '‚ùå'}")

    # –°–∏–º—É–ª—è—Ü—ñ—è –±–æ—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
    class MockBot:
        def __init__(self):
            self.bot_data = {}

    class MockApp:
        def __init__(self):
            self.bot = MockBot()
            self.handlers = []
            self.bot_data = {}

        def add_handler(self, handler, group=0):
            self.handlers.append({
                'handler': handler,
                'group': group,
                'type': type(handler).__name__
            })

        def add_error_handler(self, handler):
            pass

    # –ú–æ–∫–∞—î–º–æ Telegram Application
    import unittest.mock
    with unittest.mock.patch('telegram.ext.Application.builder') as mock_builder:
        mock_builder_instance = unittest.mock.Mock()
        mock_builder_instance.token.return_value = mock_builder_instance
        mock_builder_instance.persistence.return_value = mock_builder_instance
        mock_builder_instance.connect_timeout.return_value = mock_builder_instance
        mock_builder_instance.read_timeout.return_value = mock_builder_instance
        mock_builder_instance.write_timeout.return_value = mock_builder_instance
        mock_builder_instance.pool_timeout.return_value = mock_builder_instance

        mock_app = MockApp()
        mock_builder_instance.build.return_value = mock_app
        mock_builder.return_value = mock_builder_instance

        # –ú–æ–∫–∞—î–º–æ set_my_commands
        with unittest.mock.patch.object(mock_app.bot, 'set_my_commands', new_callable=unittest.mock.AsyncMock):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç
            bot = ClaudeCodeBot(settings, dependencies)

            try:
                await bot.initialize()
                print("‚úÖ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                callback_handlers = [h for h in mock_app.handlers if 'CallbackQuery' in h['type']]
                message_handlers = [h for h in mock_app.handlers if 'MessageHandler' in h['type']]

                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤:")
                print(f"   MessageHandler: {len(message_handlers)}")
                print(f"   CallbackQueryHandler: {len(callback_handlers)}")

                print(f"\nüìã CallbackQueryHandler –ø–æ –≥—Ä—É–ø–∞—Ö:")
                callback_groups = {}
                for h in callback_handlers:
                    group = h['group']
                    callback_groups[group] = callback_groups.get(group, 0) + 1

                for group in sorted(callback_groups.keys()):
                    print(f"   Group {group}: {callback_groups[group]} handlers")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ middleware coverage
                expected_middleware_groups = [-4, -3, -2, -1]
                main_handler_group = 0

                middleware_ok = all(group in callback_groups for group in expected_middleware_groups)
                main_handler_ok = main_handler_group in callback_groups

                print(f"\n‚úÖ Middleware coverage: {'‚úÖ' if middleware_ok else '‚ùå'}")
                print(f"‚úÖ Main callback handler: {'‚úÖ' if main_handler_ok else '‚ùå'}")

                if middleware_ok and main_handler_ok:
                    print("\nüéâ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –£–°–ü–Ü–®–ù–ï!")
                    print("   –í—Å—ñ middleware —Ç–µ–ø–µ—Ä –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –¥–æ callback'—ñ–≤")
                    print("   –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏")

                    # –°–∏–º—É–ª—è—Ü—ñ—è callback –∑–∞–ø–∏—Ç—É
                    print("\nüß™ –°–∏–º—É–ª—è—Ü—ñ—è callback –∑–∞–ø–∏—Ç—É...")

                    # Mock callback query
                    class TestUpdate:
                        def __init__(self):
                            self.callback_query = unittest.mock.Mock()
                            self.callback_query.data = "context_export"
                            self.callback_query.from_user = unittest.mock.Mock()
                            self.callback_query.from_user.id = 123456789
                            self.callback_query.answer = unittest.mock.AsyncMock()
                            self.effective_user = self.callback_query.from_user

                    class TestContext:
                        def __init__(self):
                            self.bot_data = dependencies
                            self.user_data = {}

                    # –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
                    from src.bot.handlers.callback import handle_callback_query

                    test_update = TestUpdate()
                    test_context = TestContext()

                    try:
                        await handle_callback_query(test_update, test_context)
                        print("   ‚úÖ Callback handler –ø—Ä–∞—Ü—é—î –∑ dependencies")
                    except Exception as e:
                        print(f"   ‚ùå Callback handler –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")

                else:
                    print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ü–û–í–ù–Ü–°–¢–Æ –í–ò–†–Ü–®–ï–ù–ê")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
                import traceback
                traceback.print_exc()
                return False

    return True


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    success = await test_bot_initialization()

    if success:
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ callback'–∞–º–∏")
        print("\nüìù –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
        print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç: python -m src.main")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /context")
        print("3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–Ω–æ–ø–∫—É")
        print("4. –ö–Ω–æ–ø–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
    else:
        print("\n‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é")


if __name__ == "__main__":
    asyncio.run(main())