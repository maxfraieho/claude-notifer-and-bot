#!/usr/bin/env python3
"""
–ü–æ–≤–Ω–∏–π –¥–µ–±–∞–≥ —Ç–µ—Å—Ç callback —Å–∏—Å—Ç–µ–º–∏
"""

import os
import sys
import asyncio
import logging
from unittest.mock import Mock, AsyncMock, patch

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG)

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))


class RealCallbackTest:
    """–¢–µ—Å—Ç –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""

    async def test_full_system(self):
        """–¢–µ—Å—Ç –ø–æ–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""

        print("üîç –ü–û–í–ù–ò–ô –¢–ï–°–¢ CALLBACK –°–ò–°–¢–ï–ú–ò")
        print("=" * 50)

        # –Ü–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        from src.config.settings import Settings
        from src.di.container import ApplicationContainer
        from src.bot.handlers.callback import handle_callback_query
        from src.bot.features.context_commands import ContextCommands

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings = Settings(
            telegram_token="test_token",
            telegram_bot_username="test_bot",
            approved_directory="/tmp",
            database_url="sqlite:///data/bot.db"
        )
        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DI
        container = ApplicationContainer()
        await container.initialize(settings)
        dependencies = container.get("bot_dependencies")
        print("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

        # Mock Telegram objects
        class MockCallbackQuery:
            def __init__(self, data):
                self.data = data
                self.from_user = Mock()
                self.from_user.id = 123456789
                self.answer = AsyncMock()
                self.edit_message_text = AsyncMock()
                self.message = Mock()
                self.message.reply_text = AsyncMock()
                self.message.reply_document = AsyncMock()

        class MockUpdate:
            def __init__(self, callback_data):
                self.callback_query = MockCallbackQuery(callback_data)
                self.effective_user = Mock()
                self.effective_user.id = 123456789

        class MockContext:
            def __init__(self, has_deps=True):
                self.bot_data = dependencies if has_deps else {}
                self.user_data = {}

        # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ context_commands
        print("\nüìù –¢–µ—Å—Ç 1: –ù–∞—è–≤–Ω—ñ—Å—Ç—å context_commands –≤ dependencies")
        if "context_commands" in dependencies:
            context_commands = dependencies["context_commands"]
            print(f"‚úÖ context_commands –∑–Ω–∞–π–¥–µ–Ω–æ: {type(context_commands).__name__}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥–∏
            methods = ["handle_callback_query", "handle_context_export", "handle_context_clear"]
            for method in methods:
                if hasattr(context_commands, method):
                    print(f"  ‚úÖ {method} —ñ—Å–Ω—É—î")
                else:
                    print(f"  ‚ùå {method} –ù–ï —ñ—Å–Ω—É—î")
        else:
            print("‚ùå context_commands –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ dependencies")
            return False

        # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ callback handler'–∞
        print("\nüìù –¢–µ—Å—Ç 2: –¢–µ—Å—Ç callback handler –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ dependencies")

        test_callbacks = [
            "context_export",
            "context_clear",
            "context_search",
            "context_list",
            "context_close"
        ]

        for callback_data in test_callbacks:
            print(f"\n  üîÑ –¢–µ—Å—Ç—É—î–º–æ: {callback_data}")

            update = MockUpdate(callback_data)
            context = MockContext(has_deps=True)

            try:
                await handle_callback_query(update, context)
                print(f"    ‚úÖ Callback {callback_data} –æ–±—Ä–æ–±–ª–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ answer
                if update.callback_query.answer.called:
                    print(f"    ‚úÖ callback_query.answer() –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
                else:
                    print(f"    ‚ùå callback_query.answer() –ù–ï –≤–∏–∫–ª–∏–∫–∞–Ω–æ")

            except Exception as e:
                print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

        # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –±–µ–∑ dependencies
        print("\nüìù –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –±–µ–∑ dependencies (–º–∞—î –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É)")

        update = MockUpdate("context_export")
        context = MockContext(has_deps=False)

        try:
            await handle_callback_query(update, context)
            if update.callback_query.edit_message_text.called:
                error_msg = update.callback_query.edit_message_text.call_args[0][0]
                print(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–º–∏–ª–∫—É: {error_msg}")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ù–ï –ø–æ–∫–∞–∑–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

        print("\nüéØ –í–ò–°–ù–û–í–û–ö:")
        print("–°–∏—Å—Ç–µ–º–∞ callback'—ñ–≤ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ —Ä—ñ–≤–Ω—ñ –∫–æ–¥—É.")
        print("–Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å —É –±–æ—Ç—ñ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ middleware –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")

        return True


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    tester = RealCallbackTest()
    success = await tester.test_full_system()

    if success:
        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–®–û–í –£–°–ü–Ü–®–ù–û")
        print("–ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±–æ—Ç –∑ –ø–æ–≤–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ò–í–°–Ø")


if __name__ == "__main__":
    asyncio.run(main())