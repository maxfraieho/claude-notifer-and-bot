"""
Enhanced Modules Integration
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö Moon Architect Bot
"""

import logging
from typing import Dict, Any, Optional

from telegram import Update
from telegram.ext import ContextTypes

from ..ui.navigation import NavigationManager, nav_manager
from ..ui.progress import ProgressIndicator, StatusMessage, create_progress_indicator
from ..utils.error_handler import ErrorHandler, error_handler, safe_execute
from ...localization.i18n import i18n, _

logger = logging.getLogger(__name__)

class EnhancedModulesIntegration:
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –±–æ—Ç–∞"""

    def __init__(self):
        self.navigation_manager = nav_manager
        self.i18n = i18n
        self.error_handler = ErrorHandler()

    async def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤"""
        logger.info("Initializing enhanced modules integration")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
        self.i18n.load_translations()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.i18n.set_locale("uk")

        logger.info("Enhanced modules initialized successfully")

    def get_navigation_manager(self) -> NavigationManager:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        return self.navigation_manager

    def get_localization(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        return self.i18n

    def create_progress_indicator(self, message) -> ProgressIndicator:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É"""
        return create_progress_indicator(message)

    async def handle_navigation_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∏—Ç–∏ callback –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        query = update.callback_query
        await query.answer()

        callback_data = query.data

        if callback_data == "nav:back":
            # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é
            previous_menu = self.navigation_manager.pop_navigation()
            if previous_menu:
                keyboard = self.navigation_manager.create_menu(previous_menu)
                breadcrumb = self.navigation_manager.get_breadcrumb()

                text = f"{breadcrumb}\n\n{_('messages.navigation_back')}"
                await query.edit_message_text(text, reply_markup=keyboard)
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ
                await self.show_main_menu(update, context)

        elif callback_data == "nav:main":
            # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        keyboard = self.navigation_manager.get_main_menu()
        text = f"üè† {_('commands.start')}\n\n{_('messages.welcome')}"

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)

    async def show_quick_actions_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π"""
        self.navigation_manager.push_navigation("main")
        keyboard = self.navigation_manager.create_menu("quick_actions")
        breadcrumb = self.navigation_manager.get_breadcrumb()

        text = f"{breadcrumb}\n\n‚ö° {_('buttons.quick_actions')}\n\n{_('messages.quick_actions_help')}"

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)

    @error_handler
    async def enhanced_command_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –∑ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏
        await StatusMessage.show_typing(update.message, 2)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        progress = self.create_progress_indicator(update.message)

        try:
            await progress.start(3, _('messages.processing'))

            # –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏
            await progress.update(1, _('messages.analyzing'))
            # –¢—É—Ç –±—É–ª–∞ –± —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–æ–º–∞–Ω–¥–∏

            await progress.update(2, _('messages.generating_response'))
            # –ë—ñ–ª—å—à–µ –ª–æ–≥—ñ–∫–∏

            await progress.update(3, _('messages.completing'))
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è

            await progress.complete(_('messages.completed'))

        except Exception as e:
            await self.error_handler.handle_error(e, update.message, {
                "command": "enhanced_command",
                "user_id": update.effective_user.id
            })

    def setup_enhanced_handlers(self, application):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏"""
        from telegram.ext import CallbackQueryHandler

        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_handler = CallbackQueryHandler(
            self.handle_navigation_callback,
            pattern="^nav:"
        )
        application.add_handler(nav_handler)

        logger.info("Enhanced handlers registered successfully")

    async def switch_language(self, language: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        if language in ["uk", "en"]:
            self.i18n.set_locale(language)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not hasattr(context, 'user_data'):
                context.user_data = {}
            context.user_data['language'] = language

            success_message = _('messages.language_changed')

            if update.callback_query:
                await update.callback_query.answer(success_message)
                await self.show_main_menu(update, context)
            else:
                await update.message.reply_text(success_message)
        else:
            error_message = _('messages.language_not_supported')
            await update.message.reply_text(error_message)

    def get_user_language(self, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if hasattr(context, 'user_data') and 'language' in context.user_data:
            return context.user_data['language']
        return 'uk'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

    async def create_enhanced_keyboard(self, menu_type: str = "main"):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""
        keyboard = self.navigation_manager.create_menu(menu_type)
        return keyboard

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
enhanced_integration = EnhancedModulesIntegration()

async def initialize_enhanced_modules():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤"""
    await enhanced_integration.initialize()

def get_enhanced_integration() -> EnhancedModulesIntegration:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"""
    return enhanced_integration