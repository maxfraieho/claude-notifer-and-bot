"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è Claude Bot
"""

import logging
import traceback
from typing import Optional, Dict, Any
from functools import wraps
from telegram import Message
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class ErrorHandler:
    """–ö–ª–∞—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""

    @staticmethod
    async def handle_error(
        error: Exception,
        message: Optional[Message] = None,
        context: Optional[Dict[str, Any]] = None
    ):
        """–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        error_info = {
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "context": context or {}
        }

        # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        logger.error(f"Error occurred: {error_info}")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if message:
            try:
                user_message = ErrorHandler.get_user_friendly_message(error)
                await message.reply_text(user_message)
            except Exception as e:
                logger.error(f"Failed to send error message: {e}")

    @staticmethod
    def get_user_friendly_message(error: Exception) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        error_messages = {
            "ConnectionError": "üåê –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            "TimeoutError": "‚è∞ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–π–Ω—è–ª–∞ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "PermissionError": "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.",
            "FileNotFoundError": "üìÅ –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            "ValueError": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.",
            "TelegramError": "üì° –ü–æ–º–∏–ª–∫–∞ Telegram API. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        }

        error_type = type(error).__name__
        return error_messages.get(error_type, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –æ–±'—î–∫—Ç message –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            message = None
            for arg in args:
                if hasattr(arg, 'reply_text'):
                    message = arg
                    break

            await ErrorHandler.handle_error(e, message, {
                "function": func.__name__,
                "args": str(args)[:200],
                "kwargs": str(kwargs)[:200]
            })

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ–¥—ñ–π–º–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞ –≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ
            raise

    return wrapper

def safe_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑ –ø—ñ–¥—ñ–π–º–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.warning(f"Safe execution failed for {func.__name__}: {e}")
            return None

    return wrapper

async def safe_user_error(update_or_message, context_or_text, key_or_exception=None, exception=None):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
    try:
        # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if exception:
            logger.error(
                "Error in command execution",
                error=str(exception),
                error_type=type(exception).__name__,
                user_context=f"Update: {type(update_or_message).__name__}" if hasattr(update_or_message, '__class__') else "Unknown"
            )

        # –Ø–∫—â–æ —Ü–µ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç (message, text)
        if isinstance(context_or_text, str) and not hasattr(context_or_text, 'bot'):
            message = update_or_message
            error_text = context_or_text
            await message.reply_text(f"‚ùå {error_text}")
            logger.info("Error message sent to user", error_type="direct_text")
            return

        # –Ø–∫—â–æ —Ü–µ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é (update, context, key, exception)
        from src.localization.i18n import i18n, _

        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
        try:
            if key_or_exception and isinstance(key_or_exception, str):
                error_text = _(key_or_exception)
                logger.debug("Using localized error message", key=key_or_exception)
            else:
                error_text = "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                logger.warning("Using fallback error message", reason="no_key_provided")
        except Exception as loc_error:
            error_text = "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            logger.error("Localization failed", error=str(loc_error))

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—Ä–∞—â–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é
        message_sent = False
        if hasattr(update_or_message, 'effective_message'):
            await update_or_message.effective_message.reply_text(error_text)
            message_sent = True
        elif hasattr(update_or_message, 'reply_text'):
            await update_or_message.reply_text(error_text)
            message_sent = True
        elif hasattr(update_or_message, 'edit_message_text'):
            await update_or_message.edit_message_text(error_text)
            message_sent = True

        if message_sent:
            logger.info("Error message successfully sent to user")
        else:
            logger.error("Failed to find method to send error message", update_type=type(update_or_message).__name__)

    except Exception as e:
        logger.error("Critical failure in safe_user_error", error=str(e), error_type=type(e).__name__)

async def safe_critical_error(update, context, message, exception=None):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏"""
    await safe_user_error(update, context, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {message}", exception)
