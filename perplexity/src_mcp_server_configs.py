"""MCP Server Configuration Templates.

Predefined configurations for popular MCP servers with setup wizards.
"""

import json
from typing import Any, Dict, List, Optional, Tuple

import structlog

from .exceptions import MCPValidationError

logger = structlog.get_logger()


class ServerConfigTemplate:
    """Base class for MCP server configuration templates."""

    def __init__(self, server_type: str, display_name: str, description: str):
        self.server_type = server_type
        self.display_name = display_name
        self.description = description

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get interactive setup steps."""
        raise NotImplementedError

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate configuration parameters."""
        raise NotImplementedError

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build final server configuration from user inputs."""
        raise NotImplementedError


class GitHubServerTemplate(ServerConfigTemplate):
    """GitHub MCP server template."""

    def __init__(self):
        super().__init__(
            server_type="github",
            display_name="üêô GitHub Integration",
            description="–î–æ—Å—Ç—É–ø –¥–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤, issues, pull requests —Ç–∞ —ñ–Ω—à–æ–≥–æ"
        )

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get GitHub setup steps."""
        return [
            {
                "step": 1,
                "title": "GitHub Personal Access Token",
                "description": "–í–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω GitHub Personal Access Token –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ API",
                "input_type": "password",
                "input_key": "github_token",
                "placeholder": "ghp_xxxxxxxxxxxxxxxxxx",
                "validation": "required",
                "help_text": (
                    "–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω:\n"
                    "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ GitHub.com\n"
                    "2. Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Tokens (classic)\n"
                    "3. Generate new token (classic)\n"
                    "4. –í–∏–±–µ—Ä—ñ—Ç—å scopes: repo, read:user\n"
                    "5. –°–∫–æ–ø—ñ—é–π—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω"
                )
            },
            {
                "step": 2,
                "title": "–ù–∞–∑–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "input_type": "text",
                "input_key": "server_name",
                "placeholder": "github-main",
                "validation": "required",
                "default": "github"
            }
        ]

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate GitHub configuration."""
        if not config.get("github_token"):
            return False, "GitHub —Ç–æ–∫–µ–Ω —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"

        token = config["github_token"].strip()
        if not token.startswith("ghp_") and not token.startswith("github_pat_") and not token.startswith("gho_"):
            return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç GitHub —Ç–æ–∫–µ–Ω—É"

        if len(token) < 20:
            return False, "GitHub —Ç–æ–∫–µ–Ω –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π"

        return True, None

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build GitHub server configuration."""
        return {
            "name": user_inputs.get("server_name", "github"),
            "server_type": "github",
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-github"],
            "env": {
                "GITHUB_PERSONAL_ACCESS_TOKEN": user_inputs["github_token"]
            },
            "config": {
                "github_token": user_inputs["github_token"]  # Store for reference
            }
        }


class FilesystemServerTemplate(ServerConfigTemplate):
    """Filesystem MCP server template."""

    def __init__(self):
        super().__init__(
            server_type="filesystem",
            display_name="üìÅ File System Access",
            description="–ß–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Å —Ñ–∞–π–ª—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö"
        )

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get filesystem setup steps."""
        return [
            {
                "step": 1,
                "title": "–î–æ–∑–≤–æ–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è",
                "description": "–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –¥–µ Claude –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏",
                "input_type": "text",
                "input_key": "allowed_path",
                "placeholder": "/home/user/projects",
                "validation": "required",
                "help_text": (
                    "–í–∞–∂–ª–∏–≤–æ:\n"
                    "‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –ø–æ–≤–Ω–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö\n"
                    "‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î\n"
                    "‚Ä¢ Claude –º–∞—Ç–∏–º–µ –¥–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–æ —Ü—ñ—î—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó\n"
                    "‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥: /home/username/my-project"
                )
            },
            {
                "step": 2,
                "title": "–ù–∞–∑–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "input_type": "text",
                "input_key": "server_name",
                "placeholder": "filesystem-project",
                "validation": "required",
                "default": "filesystem"
            }
        ]

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate filesystem configuration."""
        allowed_path = config.get("allowed_path", "").strip()
        if not allowed_path:
            return False, "–®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"

        if not allowed_path.startswith("/"):
            return False, "–®–ª—è—Ö –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º (–ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ /)"

        # Basic path validation
        if ".." in allowed_path:
            return False, "–®–ª—è—Ö –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ '..' –¥–ª—è –±–µ–∑–ø–µ–∫–∏"

        return True, None

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build filesystem server configuration."""
        return {
            "name": user_inputs.get("server_name", "filesystem"),
            "server_type": "filesystem",
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-filesystem", user_inputs["allowed_path"]],
            "env": {},
            "config": {
                "allowed_path": user_inputs["allowed_path"]
            }
        }


class PostgresServerTemplate(ServerConfigTemplate):
    """PostgreSQL MCP server template."""

    def __init__(self):
        super().__init__(
            server_type="postgres",
            display_name="üêò PostgreSQL Database",
            description="–ó–∞–ø–∏—Ç–∏ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è PostgreSQL –±–∞–∑–∞–º–∏ –¥–∞–Ω–∏—Ö"
        )

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get PostgreSQL setup steps."""
        return [
            {
                "step": 1,
                "title": "Connection String",
                "description": "–í–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö",
                "input_type": "password",
                "input_key": "connection_string",
                "placeholder": "postgresql://user:password@localhost:5432/dbname",
                "validation": "required",
                "help_text": (
                    "–§–æ—Ä–º–∞—Ç: postgresql://username:password@host:port/database\n\n"
                    "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
                    "‚Ä¢ postgresql://user:pass@localhost:5432/mydb\n"
                    "‚Ä¢ postgresql://user:pass@host.com:5432/prod_db\n\n"
                    "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–∞–≤–∞"
                )
            },
            {
                "step": 2,
                "title": "–ù–∞–∑–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "input_type": "text",
                "input_key": "server_name",
                "placeholder": "postgres-main",
                "validation": "required",
                "default": "postgres"
            }
        ]

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate PostgreSQL configuration."""
        connection_string = config.get("connection_string", "").strip()
        if not connection_string:
            return False, "Connection string —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"

        if not connection_string.startswith("postgresql://"):
            return False, "Connection string –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ postgresql://"

        # Basic format validation
        if "@" not in connection_string or "/" not in connection_string:
            return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç connection string"

        return True, None

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build PostgreSQL server configuration."""
        return {
            "name": user_inputs.get("server_name", "postgres"),
            "server_type": "postgres",
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-postgres", user_inputs["connection_string"]],
            "env": {},
            "config": {
                "connection_string": user_inputs["connection_string"]
            }
        }


class SQLiteServerTemplate(ServerConfigTemplate):
    """SQLite MCP server template."""

    def __init__(self):
        super().__init__(
            server_type="sqlite",
            display_name="üíæ SQLite Database",
            description="–ó–∞–ø–∏—Ç–∏ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è SQLite –±–∞–∑–∞–º–∏ –¥–∞–Ω–∏—Ö"
        )

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get SQLite setup steps."""
        return [
            {
                "step": 1,
                "title": "–®–ª—è—Ö –¥–æ –ë–î —Ñ–∞–π–ª—É",
                "description": "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ SQLite —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö",
                "input_type": "text",
                "input_key": "database_path",
                "placeholder": "/path/to/database.db",
                "validation": "required",
                "help_text": (
                    "–í–∫–∞–∂—ñ—Ç—å –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ .db —Ñ–∞–π–ª—É:\n"
                    "‚Ä¢ /home/user/data/app.db\n"
                    "‚Ä¢ /var/lib/myapp/database.sqlite\n\n"
                    "–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω —ñ—Å–Ω—É–≤–∞—Ç–∏ —Ç–∞ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è"
                )
            },
            {
                "step": 2,
                "title": "–ù–∞–∑–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "input_type": "text",
                "input_key": "server_name",
                "placeholder": "sqlite-app",
                "validation": "required",
                "default": "sqlite"
            }
        ]

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate SQLite configuration."""
        database_path = config.get("database_path", "").strip()
        if not database_path:
            return False, "–®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"

        if not database_path.startswith("/"):
            return False, "–®–ª—è—Ö –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º (–ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ /)"

        if not (database_path.endswith(".db") or database_path.endswith(".sqlite") or 
                database_path.endswith(".sqlite3")):
            return False, "–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .db, .sqlite –∞–±–æ .sqlite3"

        return True, None

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build SQLite server configuration."""
        return {
            "name": user_inputs.get("server_name", "sqlite"),
            "server_type": "sqlite",
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-sqlite", user_inputs["database_path"]],
            "env": {},
            "config": {
                "database_path": user_inputs["database_path"]
            }
        }


class GitServerTemplate(ServerConfigTemplate):
    """Git MCP server template."""

    def __init__(self):
        super().__init__(
            server_type="git",
            display_name="üîß Git Repository Tools",
            description="Git –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è–º–∏"
        )

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get Git setup steps."""
        return [
            {
                "step": 1,
                "title": "–®–ª—è—Ö –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é",
                "description": "–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é",
                "input_type": "text",
                "input_key": "repo_path",
                "placeholder": "/path/to/git/repo",
                "validation": "required",
                "help_text": (
                    "–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º:\n"
                    "‚Ä¢ /home/user/my-project\n"
                    "‚Ä¢ /var/www/website\n\n"
                    "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ .git –ø–∞–ø–∫—É"
                )
            },
            {
                "step": 2,
                "title": "–ù–∞–∑–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "input_type": "text",
                "input_key": "server_name",
                "placeholder": "git-project",
                "validation": "required",
                "default": "git"
            }
        ]

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate Git configuration."""
        repo_path = config.get("repo_path", "").strip()
        if not repo_path:
            return False, "–®–ª—è—Ö –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"

        if not repo_path.startswith("/"):
            return False, "–®–ª—è—Ö –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º (–ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ /)"

        return True, None

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build Git server configuration."""
        return {
            "name": user_inputs.get("server_name", "git"),
            "server_type": "git",
            "command": "uvx",
            "args": ["mcp-server-git", "--repository", user_inputs["repo_path"]],
            "env": {},
            "config": {
                "repo_path": user_inputs["repo_path"]
            }
        }


class PlaywrightServerTemplate(ServerConfigTemplate):
    """Playwright MCP server template."""

    def __init__(self):
        super().__init__(
            server_type="playwright",
            display_name="üåê Web Automation",
            description="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –≤–µ–±-—Å–∫—Ä–∞–ø—ñ–Ω–≥"
        )

    def get_setup_steps(self) -> List[Dict[str, Any]]:
        """Get Playwright setup steps."""
        return [
            {
                "step": 1,
                "title": "–ù–∞–∑–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "input_type": "text",
                "input_key": "server_name",
                "placeholder": "playwright-web",
                "validation": "required",
                "default": "playwright",
                "help_text": (
                    "Playwright MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.\n"
                    "–í—ñ–Ω –Ω–∞–¥–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –≤–µ–±-—Å–∫—Ä–∞–ø—ñ–Ω–≥—É."
                )
            }
        ]

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate Playwright configuration."""
        return True, None  # No special validation needed

    def build_server_config(self, user_inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Build Playwright server configuration."""
        return {
            "name": user_inputs.get("server_name", "playwright"),
            "server_type": "playwright",
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-playwright"],
            "env": {},
            "config": {}
        }


class ServerConfigRegistry:
    """Registry of available MCP server configuration templates."""

    def __init__(self):
        self.templates = {
            "github": GitHubServerTemplate(),
            "filesystem": FilesystemServerTemplate(),
            "postgres": PostgresServerTemplate(),
            "sqlite": SQLiteServerTemplate(),
            "git": GitServerTemplate(),
            "playwright": PlaywrightServerTemplate(),
        }

    def get_template(self, server_type: str) -> Optional[ServerConfigTemplate]:
        """Get template by server type."""
        return self.templates.get(server_type)

    def get_all_templates(self) -> Dict[str, ServerConfigTemplate]:
        """Get all available templates."""
        return self.templates.copy()

    def get_template_list(self) -> List[Dict[str, str]]:
        """Get list of templates for display."""
        return [
            {
                "server_type": server_type,
                "display_name": template.display_name,
                "description": template.description
            }
            for server_type, template in self.templates.items()
        ]


# Global registry instance
server_config_registry = ServerConfigRegistry()
