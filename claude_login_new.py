"""
–ù–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª /login –¥–ª—è Claude CLI –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ pexpect
"""

import asyncio
import structlog
import pexpect
import re
import time
from pathlib import Path
from typing import Optional, Tuple
from telegram import Update
from telegram.ext import ContextTypes

logger = structlog.get_logger()


async def extract_auth_url_from_claude_login() -> Tuple[bool, str, Optional[pexpect.spawn]]:
    """
    –ó–∞–ø—É—Å–∫–∞—î `claude login` —Ç–∞ –≤–∏—Ç—è–≥—É—î URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.

    Returns:
        Tuple –∑ (—É—Å–ø—ñ—Ö, URL_–∞–±–æ_–ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ—Ü–µ—Å_pexpect)
    """
    try:
        logger.info("Starting claude login to extract auth URL")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å claude login
        child = pexpect.spawn('claude login', encoding='utf-8', timeout=30)

        # –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É URL
        url_patterns = [
            r'https://claude\.ai/login\?[^\s]*',  # Claude login URL
            r'https://[^\s]*anthropic[^\s]*',     # Anthropic URL
            r'https://[^\s]+',                    # –ë—É–¥—å-—è–∫–∏–π HTTPS URL
            pexpect.TIMEOUT,
            pexpect.EOF
        ]

        output_buffer = ""
        start_time = time.time()

        while time.time() - start_time < 30:  # 30 —Å–µ–∫—É–Ω–¥ timeout
            try:
                index = child.expect(url_patterns, timeout=5)

                # –ó–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å –≤–∏–≤—ñ–¥
                if child.before:
                    output_buffer += child.before
                if child.after and index < 3:  # URL –∑–Ω–∞–π–¥–µ–Ω–æ
                    output_buffer += child.after

                logger.debug("Claude login output", index=index, output=output_buffer[-200:])

                if index < 3:  # URL –∑–Ω–∞–π–¥–µ–Ω–æ
                    # –í–∏—Ç—è–≥—É—î–º–æ URL –∑ output_buffer
                    url_match = re.search(r'https://[^\s]+', output_buffer)
                    if url_match:
                        auth_url = url_match.group(0)
                        logger.info("Auth URL extracted successfully", url=auth_url[:50] + "...")
                        return True, auth_url, child

                elif index == 3:  # TIMEOUT
                    continue

                elif index == 4:  # EOF
                    break

            except pexpect.TIMEOUT:
                continue

        # –Ø–∫—â–æ URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤–µ—Å—å output
        url_match = re.search(r'https://[^\s]+', output_buffer)
        if url_match:
            auth_url = url_match.group(0)
            logger.info("Auth URL found in buffer", url=auth_url[:50] + "...")
            return True, auth_url, child

        logger.error("No auth URL found in claude login output", output=output_buffer)
        child.close()
        return False, f"No authentication URL found. Output: {output_buffer}", None

    except Exception as e:
        logger.error("Error extracting auth URL", error=str(e))
        if 'child' in locals() and child.isalive():
            child.close()
        return False, f"Error starting claude login: {str(e)}", None


async def submit_auth_code_to_claude(child: pexpect.spawn, auth_code: str) -> Tuple[bool, str]:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–æ –ø—Ä–æ—Ü–µ—Å—É claude login.

    Args:
        child: –ê–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å pexpect
        auth_code: –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        Tuple –∑ (—É—Å–ø—ñ—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∞–±–æ_–ø–æ–º–∏–ª–∫–∞)
    """
    try:
        logger.info("Submitting auth code to claude login")

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–¥
        child.sendline(auth_code)

        # –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result_patterns = [
            r'(?i)success',           # –£—Å–ø—ñ—Ö
            r'(?i)authenticated',     # –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ
            r'(?i)logged.*in',        # –ó–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ
            r'(?i)invalid.*code',     # –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥
            r'(?i)expired.*code',     # –ö–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏–π
            r'(?i)error',             # –ü–æ–º–∏–ª–∫–∞
            r'(?i)failed',            # –ù–µ–≤–¥–∞—á–∞
            pexpect.TIMEOUT,
            pexpect.EOF
        ]

        output_buffer = ""
        start_time = time.time()

        while time.time() - start_time < 60:  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
            try:
                index = child.expect(result_patterns, timeout=10)

                # –ó–±–∏—Ä–∞—î–º–æ –≤–∏–≤—ñ–¥
                if child.before:
                    output_buffer += child.before
                if child.after and index < 7:
                    output_buffer += child.after

                logger.debug("Auth code response", index=index, output=output_buffer[-200:])

                if index in [0, 1, 2]:  # –£—Å–ø—ñ—Ö
                    logger.info("Authentication successful")
                    child.close()
                    return True, "Authentication successful"

                elif index in [3, 4, 5, 6]:  # –ü–æ–º–∏–ª–∫–∞
                    logger.warning("Authentication failed", output=output_buffer)
                    child.close()
                    return False, f"Authentication failed: {output_buffer}"

                elif index == 7:  # TIMEOUT
                    continue

                elif index == 8:  # EOF
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ exit code
                    if child.exitstatus == 0:
                        logger.info("Process exited successfully")
                        return True, "Authentication completed successfully"
                    else:
                        logger.warning("Process exited with error", exit_code=child.exitstatus)
                        return False, f"Process failed with exit code {child.exitstatus}: {output_buffer}"

            except pexpect.TIMEOUT:
                logger.debug("Waiting for auth response...")
                continue

        # Timeout
        logger.error("Authentication timeout", output=output_buffer)
        child.close()
        return False, f"Authentication timed out: {output_buffer}"

    except Exception as e:
        logger.error("Error submitting auth code", error=str(e))
        if child and child.isalive():
            child.close()
        return False, f"Error during authentication: {str(e)}"


async def check_claude_auth_status() -> Tuple[bool, str]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Claude CLI.

    Returns:
        Tuple –∑ (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –æ–ø–∏—Å_—Å—Ç–∞—Ç—É—Å—É)
    """
    try:
        logger.info("Checking Claude CLI auth status")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª –∑ –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª–∞–º–∏
        credentials_path = Path.home() / ".claude" / ".credentials.json"

        if not credentials_path.exists():
            return False, "–§–∞–π–ª –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω—É
        import json
        with open(credentials_path, 'r') as f:
            creds = json.load(f)
            oauth_data = creds.get("claudeAiOauth", {})
            expires_at = oauth_data.get("expiresAt", 0)
            current_time = time.time() * 1000

            if current_time >= expires_at:
                return False, f"–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏–π (–¥–æ {expires_at})"

        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        test_result = await asyncio.create_subprocess_exec(
            "timeout", "10", "claude", "auth", "status",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await test_result.communicate()

        if test_result.returncode == 0:
            hours_remaining = (expires_at - current_time) / (1000 * 3600)
            return True, f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (–∑–∞–ª–∏—à–∏–ª–æ—Å—å {hours_remaining:.1f} –≥–æ–¥–∏–Ω)"
        else:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {stderr.decode()[:100]}"

    except Exception as e:
        logger.error("Error checking auth status", error=str(e))
        return False, f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {str(e)}"


async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Claude CLI."""
    user_id = update.effective_user.id
    message = update.effective_message

    if not user_id or not message:
        return

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –æ—á—ñ–∫—É—î–º–æ –≤–∂–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        if context.user_data.get('claude_auth_waiting'):
            await message.reply_text(
                "‚è≥ **–í–∂–µ –æ—á—ñ–∫—É—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó**\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
            )
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        await message.reply_text("üîç **–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...**")

        is_auth, status_msg = await check_claude_auth_status()

        if is_auth:
            await message.reply_text(
                f"‚úÖ **Claude CLI –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π**\n\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_msg}\n\n"
                f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞!"
            )
            return

        # –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        await message.reply_text(
            f"‚ùå **Claude CLI –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π**\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_msg}\n\n"
            f"üöÄ –ü–æ—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó..."
        )

        # –í–∏—Ç—è–≥—É—î–º–æ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        success, result, child = await extract_auth_url_from_claude_login()

        if not success:
            await message.reply_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó**\n\n"
                f"```\n{result}\n```\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        context.user_data['claude_auth_waiting'] = True
        context.user_data['claude_auth_process'] = child
        context.user_data['claude_auth_url'] = result

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        auth_url = result
        instructions = (
            f"üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Claude CLI**\n\n"
            f"**–ö—Ä–æ–∫ 1:** –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –±—Ä–∞—É–∑–µ—Ä—ñ:\n"
            f"üëÜ {auth_url}\n\n"
            f"**–ö—Ä–æ–∫ 2:** –£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç Claude\n\n"
            f"**–ö—Ä–æ–∫ 3:** –°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó\n\n"
            f"**–ö—Ä–æ–∫ 4:** –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ —É —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
            f"‚è≥ **–û—á—ñ–∫—É—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...**\n\n"
            f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
        )

        await message.reply_text(instructions)

        logger.info("Claude login process started", user_id=user_id, url_length=len(auth_url))

    except Exception as e:
        logger.error("Error in login command", error=str(e), user_id=user_id, exc_info=True)

        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        context.user_data.pop('claude_auth_waiting', None)
        if 'claude_auth_process' in context.user_data:
            try:
                context.user_data['claude_auth_process'].close()
            except:
                pass
            context.user_data.pop('claude_auth_process', None)

        await message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏**\n\n"
            f"```\n{str(e)}\n```\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )


async def handle_auth_code_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.

    Returns:
        True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ —è–∫ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, False —ñ–Ω–∞–∫—à–µ
    """
    user_id = update.effective_user.id
    message = update.effective_message

    if not user_id or not message or not message.text:
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—á—ñ–∫—É—î–º–æ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if not context.user_data.get('claude_auth_waiting'):
        return False

    auth_code = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É (–∑–∞–∑–≤–∏—á–∞–π —Ü–µ –¥–æ–≤–≥–∏–π —Ä—è–¥–æ–∫)
    if len(auth_code) < 10:
        await message.reply_text(
            "ü§î **–ö–æ–¥ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π**\n\n"
            "–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞–∑–≤–∏—á–∞–π –¥–æ–≤–≥–∏–π —Ä—è–¥–æ–∫.\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥.\n\n"
            "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
        )
        return True

    try:
        await message.reply_text("üîÑ **–û–±—Ä–æ–±–ª—è—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...**")

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
        child = context.user_data.get('claude_auth_process')
        if not child or not child.isalive():
            await message.reply_text(
                "‚ùå **–°–µ—Å—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–∞**\n\n"
                "–ü—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –±—ñ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π.\n"
                "–í–∏–∫–æ–Ω–∞–π—Ç–µ /login –∑–Ω–æ–≤—É."
            )
            # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
            context.user_data.pop('claude_auth_waiting', None)
            context.user_data.pop('claude_auth_process', None)
            return True

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–¥ –¥–æ Claude CLI
        success, result = await submit_auth_code_to_claude(child, auth_code)

        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        context.user_data.pop('claude_auth_waiting', None)
        context.user_data.pop('claude_auth_process', None)
        context.user_data.pop('claude_auth_url', None)

        if success:
            await message.reply_text(
                f"‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!**\n\n"
                f"üéâ Claude CLI —Ç–µ–ø–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n"
                f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞!"
            )
            logger.info("Claude CLI authentication successful", user_id=user_id)
        else:
            await message.reply_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó**\n\n"
                f"```\n{result}\n```\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ /login –∑–Ω–æ–≤—É –∑ –Ω–æ–≤–∏–º –∫–æ–¥–æ–º."
            )
            logger.warning("Claude CLI authentication failed", user_id=user_id, error=result)

        return True

    except Exception as e:
        logger.error("Error processing auth code", error=str(e), user_id=user_id, exc_info=True)

        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        context.user_data.pop('claude_auth_waiting', None)
        if 'claude_auth_process' in context.user_data:
            try:
                context.user_data['claude_auth_process'].close()
            except:
                pass
            context.user_data.pop('claude_auth_process', None)

        await message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–¥—É**\n\n"
            f"```\n{str(e)}\n```\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ /login –∑–Ω–æ–≤—É."
        )
        return True


async def cancel_auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    user_id = update.effective_user.id
    message = update.effective_message

    if not user_id or not message:
        return

    if not context.user_data.get('claude_auth_waiting'):
        await message.reply_text(
            "‚ÑπÔ∏è **–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó**\n\n"
            "–ù–µ–º–∞—î —â–æ —Å–∫–∞—Å–æ–≤—É–≤–∞—Ç–∏."
        )
        return

    try:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å —è–∫—â–æ –≤—ñ–Ω —î
        if 'claude_auth_process' in context.user_data:
            try:
                context.user_data['claude_auth_process'].close()
            except:
                pass
            context.user_data.pop('claude_auth_process', None)

        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        context.user_data.pop('claude_auth_waiting', None)
        context.user_data.pop('claude_auth_url', None)

        await message.reply_text(
            "‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞**\n\n"
            "–ü—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Claude CLI —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /login –¥–ª—è –Ω–æ–≤–æ—ó —Å–ø—Ä–æ–±–∏."
        )

        logger.info("Claude CLI authentication cancelled", user_id=user_id)

    except Exception as e:
        logger.error("Error cancelling auth", error=str(e), user_id=user_id)
        await message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è**\n\n"
            f"```\n{str(e)}\n```"
        )