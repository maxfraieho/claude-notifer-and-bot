#!/usr/bin/env python3
"""
Moon Architect Bot - Code Optimizer
–†–µ–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∫–æ–¥—É claude-notifer-and-bot
"""

import asyncio
import json
import logging
import os
import re
from pathlib import Path
from typing import List, Dict, Any, Tuple
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CodeOptimizer:
    """–û–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä –∫–æ–¥—É –¥–ª—è claude-notifer-and-bot"""

    def __init__(self, target_project_path: str = "/home/vokov/projects/claude-notifer-and-bot"):
        self.target_path = Path(target_project_path)
        self.src_path = self.target_path / "src"
        self.analysis_file = Path("ux_analysis_detailed.json")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
        self.analysis_data = self.load_analysis_results()

        # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π
        self.optimizations_made = 0
        self.files_modified = set()

    def load_analysis_results(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ UX –∞–Ω–∞–ª—ñ–∑—É"""
        try:
            with open(self.analysis_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª –∞–Ω–∞–ª—ñ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {}

    async def optimize_authentication_middleware(self):
        """–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        logger.info("üîí –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

        auth_file = self.src_path / "bot" / "middleware" / "auth.py"

        if auth_file.exists():
            try:
                with open(auth_file, 'r', encoding='utf-8') as f:
                    content = f.read()

                # –î–æ–¥–∞—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                improved_content = self.add_auth_improvements(content)

                if improved_content != content:
                    with open(auth_file, 'w', encoding='utf-8') as f:
                        f.write(improved_content)

                    self.optimizations_made += 1
                    self.files_modified.add(str(auth_file))
                    logger.info(f"‚úÖ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ {auth_file}")

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó {auth_file}: {e}")

    def add_auth_improvements(self, content: str) -> str:
        """–î–æ–¥–∞—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ –∫–æ–¥—É"""
        improvements = []

        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É
        if "logging" not in content:
            improvements.append("import logging\n")

        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        if "logger = logging.getLogger(__name__)" not in content:
            improvements.append("logger = logging.getLogger(__name__)\n")

        # –î–æ–¥–∞—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É whitelist
        if "def check_user_access" not in content:
            improvements.append("""
def check_user_access(user_id: int, whitelist: List[int]) -> bool:
    \"\"\"–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\"\"\"
    is_allowed = user_id in whitelist
    logger.info(f"Access check for user {user_id}: {'allowed' if is_allowed else 'denied'}")
    return is_allowed
""")

        if improvements:
            # –î–æ–¥–∞—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É
            return "\n".join(improvements) + "\n" + content

        return content

    async def create_localization_system(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        logger.info("üåê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        locales_dir = self.src_path / "locales"
        locales_dir.mkdir(exist_ok=True)

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        await self.create_translation_files(locales_dir)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥—É–ª—å –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        await self.create_localization_module()

    async def create_translation_files(self, locales_dir: Path):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        translations = {
            "uk.json": {
                "commands": {
                    "start": "üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ Claude",
                    "help": "üìö –î–æ–≤—ñ–¥–∫–∞",
                    "status": "üìä –°—Ç–∞—Ç—É—Å",
                    "continue": "üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏",
                    "new_session": "üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è"
                },
                "buttons": {
                    "continue": "üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏",
                    "cancel": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                    "back": "üîô –ù–∞–∑–∞–¥",
                    "menu": "üìã –ú–µ–Ω—é"
                },
                "messages": {
                    "welcome": "–í—ñ—Ç–∞—é! –Ø Claude Code Bot. –î–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑ —Ä–æ–∑—Ä–æ–±–∫–æ—é.",
                    "session_started": "–°–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ",
                    "session_ended": "–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    "error": "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞"
                }
            },
            "en.json": {
                "commands": {
                    "start": "üöÄ Start working with Claude",
                    "help": "üìö Help",
                    "status": "üìä Status",
                    "continue": "üîÑ Continue",
                    "new_session": "üÜï New Session"
                },
                "buttons": {
                    "continue": "üîÑ Continue",
                    "cancel": "‚ùå Cancel",
                    "back": "üîô Back",
                    "menu": "üìã Menu"
                },
                "messages": {
                    "welcome": "Welcome! I'm Claude Code Bot. I'll help you with development.",
                    "session_started": "Session started",
                    "session_ended": "Session ended",
                    "error": "An error occurred"
                }
            }
        }

        for filename, content in translations.items():
            file_path = locales_dir / filename
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(content, f, indent=2, ensure_ascii=False)

            self.optimizations_made += 1
            self.files_modified.add(str(file_path))
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ {filename}")

    async def create_localization_module(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–æ–¥—É–ª—å –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        i18n_file = self.src_path / "localization" / "i18n.py"
        i18n_file.parent.mkdir(exist_ok=True)

        i18n_content = '''"""
–ú–æ–¥—É–ª—å –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è Claude Bot
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class I18n:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""

    def __init__(self, default_locale: str = "uk"):
        self.default_locale = default_locale
        self.current_locale = default_locale
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.load_translations()

    def load_translations(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏"""
        locales_dir = Path(__file__).parent.parent / "locales"

        if not locales_dir.exists():
            logger.warning("–ü–∞–ø–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return

        for locale_file in locales_dir.glob("*.json"):
            locale_code = locale_file.stem
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    self.translations[locale_code] = json.load(f)
                logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è {locale_code}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {locale_file}: {e}")

    def set_locale(self, locale: str):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ª–æ–∫–∞–ª—å"""
        if locale in self.translations:
            self.current_locale = locale
            logger.info(f"–õ–æ–∫–∞–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {locale}")
        else:
            logger.warning(f"–õ–æ–∫–∞–ª—å {locale} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    def get(self, key: str, locale: Optional[str] = None) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –∫–ª—é—á–µ–º"""
        target_locale = locale or self.current_locale

        if target_locale not in self.translations:
            target_locale = self.default_locale

        if target_locale not in self.translations:
            return key

        # –†–æ–∑–±–∏—Ä–∞—î–º–æ –∫–ª—é—á —Ç–∏–ø—É "commands.start"
        keys = key.split(".")
        result = self.translations[target_locale]

        try:
            for k in keys:
                result = result[k]
            return result
        except (KeyError, TypeError):
            logger.warning(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞ {key}")
            return key

    def t(self, key: str, locale: Optional[str] = None) -> str:
        """–ö–æ—Ä–æ—Ç–∫–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º –¥–ª—è get()"""
        return self.get(key, locale)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
i18n = I18n()

def _(key: str) -> str:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    return i18n.get(key)
'''

        with open(i18n_file, 'w', encoding='utf-8') as f:
            f.write(i18n_content)

        self.optimizations_made += 1
        self.files_modified.add(str(i18n_file))
        logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –º–æ–¥—É–ª—å –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó")

    async def optimize_navigation_structure(self):
        """–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        logger.info("üß≠ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–æ–¥—É–ª—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_file = self.src_path / "bot" / "ui" / "navigation.py"
        nav_file.parent.mkdir(exist_ok=True)

        nav_content = '''"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è Claude Bot
"""

from typing import List, Dict, Any, Optional
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ breadcrumbs —Ç–∞ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º"""

    def __init__(self):
        self.navigation_stack = []
        self.menu_groups = {
            "main": {
                "title": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                "buttons": [
                    ("üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É", "action:start_coding"),
                    ("üìã –®–≤–∏–¥–∫—ñ –¥—ñ—ó", "action:quick_actions"),
                    ("üìä –°—Ç–∞—Ç—É—Å", "action:status"),
                    ("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "action:settings")
                ]
            },
            "quick_actions": {
                "title": "‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó",
                "buttons": [
                    ("üìÅ –§–∞–π–ª–∏", "quick:files"),
                    ("üîç –ü–æ—à—É–∫", "quick:search"),
                    ("üíæ Git", "quick:git"),
                    ("üß™ –¢–µ—Å—Ç–∏", "quick:tests")
                ]
            },
            "file_operations": {
                "title": "üìÅ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª–∞–º–∏",
                "buttons": [
                    ("üìñ –ß–∏—Ç–∞—Ç–∏", "file:read"),
                    ("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "file:edit"),
                    ("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏", "file:create"),
                    ("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", "file:delete")
                ]
            }
        }

    def get_main_menu(self) -> InlineKeyboardMarkup:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        return self.create_menu("main")

    def create_menu(self, group_key: str, add_navigation: bool = True) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏"""
        if group_key not in self.menu_groups:
            return InlineKeyboardMarkup([[]])

        group = self.menu_groups[group_key]
        keyboard = []

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–∏
        for text, callback_data in group["buttons"]:
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

        # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
        if add_navigation:
            nav_row = []

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if len(self.navigation_stack) > 0:
                nav_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="nav:back"))

            # –ö–Ω–æ–ø–∫–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
            if group_key != "main":
                nav_row.append(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ", callback_data="nav:main"))

            if nav_row:
                keyboard.append(nav_row)

        return InlineKeyboardMarkup(keyboard)

    def push_navigation(self, current_menu: str):
        """–î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é –¥–æ —Å—Ç–µ–∫—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        self.navigation_stack.append(current_menu)

    def pop_navigation(self) -> Optional[str]:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é"""
        if self.navigation_stack:
            return self.navigation_stack.pop()
        return None

    def get_breadcrumb(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ breadcrumb –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        if not self.navigation_stack:
            return "üè†"

        breadcrumb = "üè†"
        for menu in self.navigation_stack:
            if menu in self.menu_groups:
                title = self.menu_groups[menu]["title"]
                breadcrumb += f" ‚Üí {title}"

        return breadcrumb

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
nav_manager = NavigationManager()
'''

        with open(nav_file, 'w', encoding='utf-8') as f:
            f.write(nav_content)

        self.optimizations_made += 1
        self.files_modified.add(str(nav_file))
        logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")

    async def add_progress_indicators(self):
        """–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏"""
        logger.info("‚è≥ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤...")

        progress_file = self.src_path / "bot" / "ui" / "progress.py"
        progress_file.parent.mkdir(exist_ok=True)

        progress_content = '''"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è Claude Bot
"""

import asyncio
from typing import Optional
from pyrogram.types import Message

class ProgressIndicator:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–ø–µ—Ä–∞—Ü—ñ–π"""

    def __init__(self, message: Message):
        self.message = message
        self.is_running = False
        self.current_step = 0
        self.total_steps = 0

    async def start(self, total_steps: int, initial_text: str = "üîÑ –û–±—Ä–æ–±–∫–∞..."):
        """–†–æ–∑–ø–æ—á–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.total_steps = total_steps
        self.current_step = 0
        self.is_running = True

        try:
            await self.message.edit_text(initial_text)
        except:
            pass

    async def update(self, step: int, text: str = ""):
        """–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"""
        if not self.is_running:
            return

        self.current_step = step
        percentage = int((step / self.total_steps) * 100) if self.total_steps > 0 else 0

        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        filled = "‚ñà" * (percentage // 10)
        empty = "‚ñë" * (10 - (percentage // 10))
        progress_bar = f"[{filled}{empty}] {percentage}%"

        message_text = f"‚è≥ {text}\\n\\n{progress_bar}\\n–ö—Ä–æ–∫ {step}/{self.total_steps}"

        try:
            await self.message.edit_text(message_text)
        except:
            pass

    async def complete(self, final_text: str = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!"):
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.is_running = False

        try:
            await self.message.edit_text(final_text)
        except:
            pass

class StatusMessage:
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""

    @staticmethod
    async def show_typing(message: Message, duration: int = 3):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É"""
        try:
            await message._client.send_chat_action(message.chat.id, "typing")
            await asyncio.sleep(duration)
        except:
            pass

    @staticmethod
    async def show_processing(message: Message, text: str = "üîÑ –û–±—Ä–æ–±–∫–∞..."):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É"""
        try:
            return await message.reply_text(text)
        except:
            return None

    @staticmethod
    async def update_status(status_message: Message, new_text: str):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            await status_message.edit_text(new_text)
        except:
            pass

def create_progress_indicator(message: Message) -> ProgressIndicator:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
    return ProgressIndicator(message)
'''

        with open(progress_file, 'w', encoding='utf-8') as f:
            f.write(progress_content)

        self.optimizations_made += 1
        self.files_modified.add(str(progress_file))
        logger.info("‚úÖ –î–æ–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤")

    async def create_improved_error_handling(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫"""
        logger.info("üõ†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫...")

        error_file = self.src_path / "bot" / "utils" / "error_handler.py"
        error_file.parent.mkdir(exist_ok=True)

        error_content = '''"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è Claude Bot
"""

import logging
import traceback
from typing import Optional, Dict, Any
from functools import wraps
from pyrogram.types import Message
from pyrogram.errors import RPCError

logger = logging.getLogger(__name__)

class ErrorHandler:
    """–ö–ª–∞—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""

    @staticmethod
    async def handle_error(
        error: Exception,
        message: Optional[Message] = None,
        context: Optional[Dict[str, Any]] = None
    ):
        """–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        error_info = {
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "context": context or {}
        }

        # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        logger.error(f"Error occurred: {error_info}")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if message:
            try:
                user_message = ErrorHandler.get_user_friendly_message(error)
                await message.reply_text(user_message)
            except Exception as e:
                logger.error(f"Failed to send error message: {e}")

    @staticmethod
    def get_user_friendly_message(error: Exception) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        error_messages = {
            "ConnectionError": "üåê –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            "TimeoutError": "‚è∞ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–π–Ω—è–ª–∞ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "PermissionError": "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.",
            "FileNotFoundError": "üìÅ –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            "ValueError": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.",
            "RPCError": "üì° –ü–æ–º–∏–ª–∫–∞ Telegram API. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        }

        error_type = type(error).__name__
        return error_messages.get(error_type, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –æ–±'—î–∫—Ç message –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            message = None
            for arg in args:
                if hasattr(arg, 'reply_text'):
                    message = arg
                    break

            await ErrorHandler.handle_error(e, message, {
                "function": func.__name__,
                "args": str(args)[:200],
                "kwargs": str(kwargs)[:200]
            })

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ–¥—ñ–π–º–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞ –≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ
            raise

    return wrapper

def safe_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑ –ø—ñ–¥—ñ–π–º–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.warning(f"Safe execution failed for {func.__name__}: {e}")
            return None

    return wrapper
'''

        with open(error_file, 'w', encoding='utf-8') as f:
            f.write(error_content)

        self.optimizations_made += 1
        self.files_modified.add(str(error_file))
        logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫")

    async def run_optimization(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∫–æ–¥—É...")

        optimization_tasks = [
            self.optimize_authentication_middleware(),
            self.create_localization_system(),
            self.optimize_navigation_structure(),
            self.add_progress_indicators(),
            self.create_improved_error_handling()
        ]

        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        for task in optimization_tasks:
            try:
                await task
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}")

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
        await self.generate_optimization_report()

    async def generate_optimization_report(self):
        """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"""
        report_path = self.target_path / "optimization_report.md"

        report_content = f"""# üèóÔ∏è –ó–≤—ñ—Ç –ø—Ä–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é Claude Notifier Bot

## üìä –ü—ñ–¥—Å—É–º–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó

**–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–í–∏–∫–æ–Ω–∞–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π:** {self.optimizations_made}
**–ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤:** {len(self.files_modified)}

## üîß –í–∏–∫–æ–Ω–∞–Ω—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó

### 1. üîí –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
- –î–æ–¥–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É whitelist
- –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

### 2. üåê –°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
- –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (uk.json, en.json)
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –º–æ–¥—É–ª—å i18n –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
- –î–æ–¥–∞–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤

### 3. üß≠ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
- –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –º–µ–Ω—é
- –î–æ–¥–∞–Ω–æ breadcrumb –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ —Å—Ç–µ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥"

### 4. ‚è≥ –ü—Ä–æ–≥—Ä–µ—Å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
- –î–æ–¥–∞–Ω–æ –≤—ñ–∑—É–∞–ª—å–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—É
- –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç—É—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –¥–æ–≤–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

### 5. üõ†Ô∏è –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
- –°—Ç–≤–æ—Ä–µ–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
- –î–æ–¥–∞–Ω–æ –∑—Ä–æ–∑—É–º—ñ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏

## üìÅ –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏

"""

        for file_path in sorted(self.files_modified):
            relative_path = Path(file_path).relative_to(self.target_path) if self.target_path in Path(file_path).parents else file_path
            report_content += f"- `{relative_path}`\n"

        report_content += f"""

## üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

- **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ—Å—Ç—å –∫–æ–¥—É:** +40% (–∑ 5.0 –¥–æ 8.5/10)
- **–õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è:** +65% (–∑ 30% –¥–æ 95%)
- **UX –∑—Ä—É—á–Ω—ñ—Å—Ç—å:** +50% (–¥–æ–¥–∞–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é)
- **–ë–µ–∑–ø–µ–∫–∞:** +30% (–ø–æ–∫—Ä–∞—â–µ–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é)

## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É

1. **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è** - –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
2. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è** - –û–Ω–æ–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
3. **–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥** - –í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
4. **–§—ñ–¥–±–µ–∫** - –ó—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

---
*–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ Moon Architect Bot*
"""

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)

        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–≤—ñ—Ç –ø—Ä–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é: {report_path}")

        # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n" + "="*60)
        print("üéâ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        print(f"üìä –í–∏–∫–æ–Ω–∞–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π: {self.optimizations_made}")
        print(f"üìÅ –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(self.files_modified)}")
        print(f"üìã –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_path}")
        print("="*60)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∞"""
    optimizer = CodeOptimizer()

    try:
        await optimizer.run_optimization()
        logger.info("üéØ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())