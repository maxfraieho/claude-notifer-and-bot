"""Claude availability middleware for intercepting requests."""

import structlog
from typing import Optional, Callable, Any
from telegram import Update
from telegram.ext import ContextTypes

from ...config.settings import Settings

logger = structlog.get_logger(__name__)


class ClaudeAvailabilityMiddleware:
    """Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–∞–º–∏ –∑–≥—ñ–¥–Ω–æ –∑ –ø–ª–∞–Ω–æ–º."""

    def __init__(self, settings: Settings):
        """Initialize the middleware."""
        self.settings = settings
        self.enabled = settings.claude_availability.enabled

    def is_claude_request(self, update: Update) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ü–µ –∑–∞–ø–∏—Ç –¥–æ Claude."""
        if not update or not update.message:
            return False

        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ (–ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ /)
        if update.message.text and update.message.text.startswith('/'):
            return False

        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ callback queries
        if update.callback_query:
            return False

        # –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ Claude
        return bool(update.message.text or update.message.document)

    async def handle_unavailable(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                details: dict) -> bool:
        """–û–±—Ä–æ–±–∏—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—é –∫–æ–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."""
        try:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
            status_message = details.get("status_message", "üî¥ Claude –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

            # –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_parts = [status_message]

            if "estimated_recovery" in details:
                message_parts.append(f"\n‚è≥ {details['estimated_recovery']}")

            message_parts.append("\n\nüí° –Ø –ø–æ–≤—ñ–¥–æ–º–ª—é –≤ –≥—Ä—É–ø—É, –∫–æ–ª–∏ Claude —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            message_parts.append("üìã –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /claude_status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")

            full_message = "".join(message_parts)

            # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await update.message.reply_text(full_message, parse_mode=None)

            logger.info("Claude unavailable - user notified",
                       user_id=update.effective_user.id,
                       reason=details.get("reason"))

            return True  # –ó–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ

        except Exception as e:
            logger.error(f"Error handling unavailable Claude: {e}")
            return False

    async def __call__(self, handler: Callable, update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> Any:
        """Middleware entry point."""
        if not self.enabled:
            return await handler(update, context)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –¥–æ Claude
        if not self.is_claude_request(update):
            return await handler(update, context)

        # –û—Ç—Ä–∏–º–∞—Ç–∏ availability monitor
        availability_monitor = context.bot_data.get("claude_availability_monitor")
        if not availability_monitor:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∞, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return await handler(update, context)

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∑ –∫–µ—à–µ–º
            is_available, details = await availability_monitor.is_claude_available_cached()

            if not is_available:
                # Claude –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                handled = await self.handle_unavailable(update, context, details)
                if handled:
                    return None  # –ó–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ, –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –¥–∞–ª—ñ

            # Claude –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ - –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
            return await handler(update, context)

        except Exception as e:
            logger.error(f"Error in Claude availability middleware: {e}")
            # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return await handler(update, context)


async def claude_availability_middleware(handler: Callable, update: Update,
                                       context: ContextTypes.DEFAULT_TYPE) -> Any:
    """–§—É–Ω–∫—Ü—ñ—è middleware –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ."""
    settings: Settings = context.get("settings")
    if not settings:
        return await handler(update, context)

    middleware = ClaudeAvailabilityMiddleware(settings)
    return await middleware(handler, update, context)