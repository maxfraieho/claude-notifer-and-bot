"""
DND Prompts Command Handlers - –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è DND –ø—Ä–æ–º–ø—Ç–∞–º–∏
"""

import structlog
from typing import cast
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from pathlib import Path

from ...localization.util import t, get_user_id, get_effective_message
from ..features.dnd_prompt_manager import DNDPromptManager, DNDPrompt
from datetime import datetime

logger = structlog.get_logger()

async def dnd_prompts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /dnd_prompts command - manage DND prompts."""
    user_id = get_user_id(update)
    message = get_effective_message(update)
    
    if not user_id or not message:
        return
        
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤
        settings = context.bot_data.get("settings")
        if not settings:
            await message.reply_text("‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
            return
            
        data_dir = Path("./data")
        prompt_manager = DNDPromptManager(data_dir)
        await prompt_manager.load_prompts()
        
        prompts = await prompt_manager.list_prompts()
        
        if not prompts:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑—Ä–∞–∑–∫–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏
            await prompt_manager.create_sample_prompts()
            prompts = await prompt_manager.list_prompts()
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard = [
            [
                InlineKeyboardButton(await t(context, user_id, "buttons.create_prompt"), callback_data="dnd:create"),
                InlineKeyboardButton(await t(context, user_id, "buttons.prompts_list"), callback_data="dnd:list")
            ],
            [
                InlineKeyboardButton(await t(context, user_id, "buttons.settings"), callback_data="dnd:settings"),
                InlineKeyboardButton(await t(context, user_id, "buttons.statistics"), callback_data="dnd:stats")
            ],
            [
                InlineKeyboardButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç", callback_data="dnd:export"),
                InlineKeyboardButton("üì• –Ü–º–ø–æ—Ä—Ç", callback_data="dnd:import")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"""üåô **DND Prompts Manager**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–º–ø—Ç—ñ–≤: {len(prompts)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {len([p for p in prompts if p.enabled])}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(set(p.category for p in prompts))}

üïí **DND –ø–µ—Ä—ñ–æ–¥:** 23:00 - 08:00
–ü—Ä–æ–º–ø—Ç–∏ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–ª–∏ Claude CLI –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ.

**–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:**"""
        
        await message.reply_text(message_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error("Error in dnd_prompts command", error=str(e), user_id=user_id)
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DND –ø—Ä–æ–º–ø—Ç—ñ–≤")

async def create_dnd_prompt_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /create_dnd_prompt command - create new DND prompt."""
    user_id = get_user_id(update)
    message = get_effective_message(update)
    
    if not user_id or not message:
        return
        
    try:
        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
        instructions = """üìù **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è DND –ø—Ä–æ–º–ø—Ç—É**

–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:

```
TITLE: –ù–∞–∑–≤–∞ –ø—Ä–æ–º–ø—Ç—É
DESCRIPTION: –û–ø–∏—Å —â–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–º–ø—Ç
CATEGORY: –∫–æ–¥-—è–∫–æ—Å—Ç—å|–±–µ–∑–ø–µ–∫–∞|–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è|–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
PRIORITY: 1-10
DURATION: —Ö–≤–∏–ª–∏–Ω–∏
TAGS: —Ç–µ–≥1,—Ç–µ–≥2,—Ç–µ–≥3

--- PROMPT ---
–¢—É—Ç —ñ–¥–µ —Å–∞–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É —É markdown —Ñ–æ—Ä–º–∞—Ç—ñ.

–ú–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ Claude CLI:
- Read –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
- Write –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤  
- Bash –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
- Grep –¥–ª—è –ø–æ—à—É–∫—É

–ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ–º–ø—Ç—É:
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ —Å—Ç–≤–æ—Ä–∏ –∑–≤—ñ—Ç –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏...
```

**–ü—Ä–∏–∫–ª–∞–¥:**"""
        
        example = """```
TITLE: –©–æ–¥–µ–Ω–Ω–∏–π –∫–æ–¥-—Ä–µ–≤—é
DESCRIPTION: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω –∑–∞ –¥–µ–Ω—å
CATEGORY: –∫–æ–¥-—è–∫–æ—Å—Ç—å
PRIORITY: 8
DURATION: 30
TAGS: git,code-review,analysis

--- PROMPT ---
–í–∏–∫–æ–Ω–∞–π –∞–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω —É git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å:

1. `git log --oneline --since="1 day ago"`
2. `git diff HEAD~1..HEAD`
3. –ü—Ä–æ—á–∏—Ç–∞–π –∑–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏ —á–µ—Ä–µ–∑ Read
4. –°—Ç–≤–æ—Ä–∏ –∑–≤—ñ—Ç –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏

–ó–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞:
- –Ø–∫–æ—Å—Ç—ñ –∫–æ–¥—É
- –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –±–∞–≥–∞—Ö
- –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è—Ö –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
```"""

        keyboard = [
            [InlineKeyboardButton(await t(context, user_id, "buttons.prompt_templates"), callback_data="dnd:templates")],
            [InlineKeyboardButton(await t(context, user_id, "buttons.back_to_menu"), callback_data="dnd:menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(f"{instructions}\n\n{example}", reply_markup=reply_markup)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        context.user_data['creating_dnd_prompt'] = True
        
    except Exception as e:
        logger.error("Error in create_dnd_prompt command", error=str(e), user_id=user_id)
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É")

async def handle_dnd_prompt_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Handle DND prompt creation from user message."""
    user_id = get_user_id(update)
    message = get_effective_message(update)
    
    if not user_id or not message or not message.text:
        return False
        
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–ø—Ç
    if not context.user_data.get('creating_dnd_prompt'):
        return False
    
    try:
        text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–º–ø—Ç—É
        lines = text.split('\n')
        metadata = {}
        prompt_content = ""
        
        parsing_prompt = False
        
        for line in lines:
            line = line.strip()
            
            if line == "--- PROMPT ---":
                parsing_prompt = True
                continue
                
            if parsing_prompt:
                prompt_content += line + "\n"
            elif ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                
                if key == 'title':
                    metadata['title'] = value
                elif key == 'description':
                    metadata['description'] = value
                elif key == 'category':
                    metadata['category'] = value
                elif key == 'priority':
                    metadata['priority'] = int(value)
                elif key == 'duration':
                    metadata['estimated_duration'] = int(value)
                elif key == 'tags':
                    metadata['tags'] = [t.strip() for t in value.split(',')]
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not metadata.get('title'):
            await message.reply_text("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ TITLE –ø—Ä–æ–º–ø—Ç—É")
            return True
            
        if not prompt_content.strip():
            await message.reply_text("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É –ø—ñ—Å–ª—è --- PROMPT ---")
            return True
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç
        prompt_id = metadata['title'].lower().replace(' ', '_').replace('-', '_')
        prompt_id = ''.join(c for c in prompt_id if c.isalnum() or c == '_')
        
        dnd_prompt = DNDPrompt(
            id=prompt_id,
            title=metadata.get('title', '–ù–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç'),
            description=metadata.get('description', ''),
            prompt_content=prompt_content.strip(),
            tags=metadata.get('tags', []),
            priority=metadata.get('priority', 5),
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            category=metadata.get('category', 'general'),
            estimated_duration=metadata.get('estimated_duration', 30)
        )
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º–ø—Ç
        data_dir = Path("./data")
        prompt_manager = DNDPromptManager(data_dir)
        
        success = await prompt_manager.add_prompt(dnd_prompt)
        
        if success:
            await message.reply_text(f"""‚úÖ **–ü—Ä–æ–º–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**

**ID:** `{prompt_id}`
**–ù–∞–∑–≤–∞:** {dnd_prompt.title}
**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {dnd_prompt.category}
**–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** {dnd_prompt.priority}/10
**–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:** {dnd_prompt.estimated_duration} —Ö–≤

–ü—Ä–æ–º–ø—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª `data/dnd_prompts/{prompt_id}.md`

–í—ñ–Ω –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –ø—ñ–¥ —á–∞—Å DND –ø–µ—Ä—ñ–æ–¥—É.""")
        else:
            await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É. –ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–º–ø—Ç –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î.")
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω
        context.user_data['creating_dnd_prompt'] = False
        return True
        
    except Exception as e:
        logger.error("Error handling DND prompt creation", error=str(e), user_id=user_id)
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–º–ø—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        context.user_data['creating_dnd_prompt'] = False
        return True

async def list_dnd_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str = None) -> None:
    """Show list of DND prompts."""
    user_id = get_user_id(update)
    message = get_effective_message(update)
    
    if not user_id or not message:
        return
        
    try:
        data_dir = Path("./data")
        prompt_manager = DNDPromptManager(data_dir)
        await prompt_manager.load_prompts()
        
        prompts = await prompt_manager.list_prompts(category=category)
        
        if not prompts:
            await message.reply_text(f"üìã –ü—Ä–æ–º–ø—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ{f' –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}' if category else ''}")
            return
        
        # –ì—Ä—É–ø—É–≤–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        by_category = {}
        for prompt in prompts:
            if prompt.category not in by_category:
                by_category[prompt.category] = []
            by_category[prompt.category].append(prompt)
        
        message_text = f"üìã **DND –ü—Ä–æ–º–ø—Ç–∏** ({len(prompts)})\n\n"
        
        for cat, cat_prompts in by_category.items():
            message_text += f"**üìÇ {cat.upper()}** ({len(cat_prompts)})\n"
            
            for prompt in cat_prompts[:5]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 5
                status = "‚úÖ" if prompt.enabled else "‚ùå"
                message_text += f"{status} **{prompt.title}** (P:{prompt.priority}, {prompt.estimated_duration}–º)\n"
                message_text += f"   _{prompt.description[:60]}..._\n"
            
            if len(cat_prompts) > 5:
                message_text += f"   ... —Ç–∞ —â–µ {len(cat_prompts) - 5} –ø—Ä–æ–º–ø—Ç—ñ–≤\n"
            
            message_text += "\n"
        
        keyboard = [
            [InlineKeyboardButton(await t(context, user_id, "buttons.create_new"), callback_data="dnd:create")],
            [InlineKeyboardButton(await t(context, user_id, "buttons.back_simple"), callback_data="dnd:menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(message_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error("Error listing DND prompts", error=str(e), user_id=user_id)
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–ø—Ç—ñ–≤")