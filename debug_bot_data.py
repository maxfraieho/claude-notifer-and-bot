#!/usr/bin/env python3
"""
Debug Bot Data - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ bot_data –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def debug_bot_data():
    """–î–µ–±–∞–≥—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é bot_data"""

    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é bot_data...\n")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DI container
    try:
        from src.di.container import get_di_container
        container = get_di_container()
        print("‚úÖ DI container –¥–æ—Å—Ç—É–ø–Ω–∏–π")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å context_commands
        if container.has("context_commands"):
            context_commands = container.get("context_commands")
            print(f"‚úÖ context_commands –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DI: {type(context_commands)}")
        else:
            print("‚ùå context_commands –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ DI container")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ bot_dependencies
        if container.has("bot_dependencies"):
            deps = container.get("bot_dependencies")
            print(f"‚úÖ bot_dependencies –∑–Ω–∞–π–¥–µ–Ω–æ: {list(deps.keys())}")

            if "context_commands" in deps:
                print("‚úÖ context_commands —î –≤ bot_dependencies")
            else:
                print("‚ùå context_commands –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ bot_dependencies")
        else:
            print("‚ùå bot_dependencies –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ DI container")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ DI container: {e}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π Bot
    try:
        from src.bot.core import ClaudeCodeBot
        from src.config.settings import Settings

        settings = Settings()
        print(f"‚úÖ Settings –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É persistence
        persistence_file = Path("data/telegram_persistence.pickle")
        if persistence_file.exists():
            print(f"‚úÖ Persistence —Ñ–∞–π–ª —ñ—Å–Ω—É—î: {persistence_file}")
        else:
            print(f"‚ùå Persistence —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π: {persistence_file}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Bot: {e}")

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç - —á–∏ –º–æ–∂–µ DI —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    try:
        from src.di.container import ApplicationContainer
        from src.config.settings import Settings

        settings = Settings()
        test_container = ApplicationContainer()
        await test_container.initialize(settings)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        components_to_check = [
            "storage", "auth_manager", "claude_integration",
            "context_commands", "unified_menu"
        ]

        print(f"\nüìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ DI:")
        for component in components_to_check:
            try:
                if test_container.has(component):
                    obj = test_container.get(component)
                    print(f"  ‚úÖ {component}: {type(obj).__name__}")
                else:
                    print(f"  ‚ùå {component}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            except Exception as e:
                print(f"  ‚ùå {component}: –ø–æ–º–∏–ª–∫–∞ - {e}")

        await test_container.shutdown()

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è DI: {e}")

if __name__ == "__main__":
    asyncio.run(debug_bot_data())