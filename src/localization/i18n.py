"""
–ú–æ–¥—É–ª—å –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è Claude Bot
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class I18n:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""

    def __init__(self, default_locale: str = "uk"):
        self.default_locale = default_locale
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.load_translations()

    def load_translations(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏"""
        locales_dir = Path(__file__).parent / "../locales"

        if not locales_dir.exists():
            logger.warning(f"–ü–∞–ø–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {locales_dir.absolute()}")
            return

        loaded_count = 0
        for locale_file in locales_dir.glob("*.json"):
            locale_code = locale_file.stem
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.translations[locale_code] = data
                    key_count = self._count_keys(data)
                    logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è '{locale_code}' ({key_count} –∫–ª—é—á—ñ–≤)")
                    loaded_count += 1
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JSON –≤ {locale_file}: —Ä—è–¥–æ–∫ {e.lineno}, –ø–æ–∑–∏—Ü—ñ—è {e.colno}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {locale_file}: {e}")

        logger.info(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {loaded_count} —Ñ–∞–π–ª—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ {len(list(locales_dir.glob('*.json')))} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö")

    def set_locale(self, locale: str):
        """Deprecated: do not set global current locale in multi-worker environments.
        Locale should be passed explicitly to `get()` or managed per-user in storage.
        This method will only log an informational message for backward compatibility.
        """
        if locale in self.translations:
            logger.info(f"(deprecated) requested to set locale to {locale}; use per-request locale storage instead")
        else:
            logger.warning(f"–õ–æ–∫–∞–ª—å {locale} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    def _count_keys(self, data: dict, path: str = "") -> int:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        count = 0
        for key, value in data.items():
            current_path = f"{path}.{key}" if path else key
            if isinstance(value, dict):
                count += self._count_keys(value, current_path)
            else:
                count += 1
        return count

    def get_debug_info(self) -> dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è"""
        info = {
            "default_locale": self.default_locale,
            "loaded_locales": list(self.translations.keys()),
            "key_counts": {},
            "sample_keys": {}
        }

        for locale, data in self.translations.items():
            info["key_counts"][locale] = self._count_keys(data)
            # –ó—ñ–±—Ä–∞—Ç–∏ –ø–µ—Ä—à—ñ 3 –∫–ª—é—á—ñ —è–∫ –∑—Ä–∞–∑–æ–∫
            sample = []
            for key in self._get_all_keys(data):
                sample.append(key)
                if len(sample) >= 3:
                    break
            info["sample_keys"][locale] = sample

        return info

    def _get_all_keys(self, data: dict, path: str = "") -> list:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∫–ª—é—á—ñ —É –≤–∏–≥–ª—è–¥—ñ dot-notation —Å–ø–∏—Å–∫—É"""
        keys = []
        for key, value in data.items():
            current_path = f"{path}.{key}" if path else key
            if isinstance(value, dict):
                keys.extend(self._get_all_keys(value, current_path))
            else:
                keys.append(current_path)
        return keys

    def _get_plural_form_uk(self, count: int) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ñ–æ—Ä–º—É –º–Ω–æ–∂–∏–Ω–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏"""
        if count % 10 == 1 and count % 100 != 11:
            return "one"
        elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
            return "few"
        else:
            return "many"

    def get(self, key: str, locale: Optional[str] = None, **kwargs) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –∫–ª—é—á–µ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.

        –ù–Ü–ö–û–õ–ò –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∏—Ä–∏–π –∫–ª—é—á —è–∫ ¬´—É—Å–ø—ñ—à–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥¬ª.
        –ü—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É –ø–æ–≤–µ—Ä—Ç–∞—î –∑—Ä–æ–∑—É–º—ñ–ª–µ fallback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

        Args:
            key: –ö–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É (–ø—ñ–¥—Ç—Ä–∏–º—É—î dot notation)
            locale: –ö–æ–¥ –ª–æ–∫–∞–ª—ñ (None = –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ default_locale)
            **kwargs: –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞

        Returns:
            –ü–µ—Ä–µ–∫–ª–∞–¥ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º –∞–±–æ fallback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        target_locale = locale or self.default_locale

        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—É –ª–æ–∫–∞–ª—å
        if target_locale not in self.translations:
            # Fallback –¥–æ default_locale
            target_locale = self.default_locale

        # –Ø–∫—â–æ –Ω–∞–≤—ñ—Ç—å default_locale –≤—ñ–¥—Å—É—Ç–Ω—è - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ fallback
        if target_locale not in self.translations:
            logger.error(f"–õ–æ–∫–∞–ª—å {target_locale} –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            return f"[missing translation: {key} | locale={locale or 'default'}]"

        # –†–æ–∑–±–∏—Ä–∞—î–º–æ –∫–ª—é—á —Ç–∏–ø—É "commands.start"
        keys = key.split(".")
        result = self.translations[target_locale]

        try:
            for k in keys:
                result = result[k]

            # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
            if isinstance(result, str):
                # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ kwargs
                if kwargs:
                    try:
                        return result.format(**kwargs)
                    except KeyError as e:
                        logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ '{e}' –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ '{key}'")
                        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —è–∫ fallback
                        return result
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ '{key}': {e}")
                        return result
                else:
                    return result
            elif isinstance(result, dict):
                # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø–ª—é—Ä–∞–ª—ñ–∑–∞—Ü—ñ—ó
                if 'count' in kwargs and target_locale == 'uk':
                    count = kwargs['count']
                    plural_form = self._get_plural_form_uk(count)
                    if plural_form in result:
                        text = result[plural_form]
                        try:
                            return text.format(**kwargs)
                        except Exception as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–ª—é—Ä–∞–ª—å–Ω–æ—ó —Ñ–æ—Ä–º–∏ '{key}': {e}")
                            return text
                    else:
                        logger.warning(f"–ü–ª—é—Ä–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ '{plural_form}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{key}'")
                        # Fallback –¥–æ –ø–µ—Ä—à–æ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—ó —Ñ–æ—Ä–º–∏
                        first_form = next(iter(result.values()), str(result))
                        try:
                            return first_form.format(**kwargs)
                        except:
                            return first_form
                return str(result)
            else:
                return str(result)

        except (KeyError, TypeError):
            # –ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ù–ï –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏—Ä–∏–π –∫–ª—é—á!
            logger.warning(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞ '{key}' –≤ –ª–æ–∫–∞–ª—ñ '{target_locale}'")
            return f"[missing translation: {key} | locale={target_locale}]"

    def t(self, key: str, locale: Optional[str] = None, **kwargs) -> str:
        """–ö–æ—Ä–æ—Ç–∫–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º –¥–ª—è get()"""
        return self.get(key, locale, **kwargs)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
i18n = I18n()

def _(key: str, **kwargs) -> str:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    return i18n.get(key, **kwargs)
