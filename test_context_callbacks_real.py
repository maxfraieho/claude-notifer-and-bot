#!/usr/bin/env python3
"""
Real Context Callbacks Test - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å–ø—Ä–∞–≤–∂–Ω—é –æ–±—Ä–æ–±–∫—É callback'—ñ–≤
"""
import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ src –¥–æ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from unittest.mock import Mock, AsyncMock
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Update, User, Chat

async def test_real_callback_handling():
    """–¢–µ—Å—Ç—É—î —Å–ø—Ä–∞–≤–∂–Ω—é –æ–±—Ä–æ–±–∫—É callback'—ñ–≤ —á–µ—Ä–µ–∑ —ñ–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É"""

    print("üîç –¢–µ—Å—Ç—É—î–º–æ —Å–ø—Ä–∞–≤–∂–Ω—é –æ–±—Ä–æ–±–∫—É context callback'—ñ–≤...\n")

    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    try:
        from src.bot.handlers.callback import handle_callback_query
        print("‚úÖ –†–µ–∞–ª—å–Ω–∏–π handle_callback_query —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É handle_callback_query: {e}")
        return False

    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ context_commands
    try:
        from src.bot.features.context_commands import ContextCommands
        print("‚úÖ ContextCommands —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É ContextCommands: {e}")
        return False

    # –°—Ç–≤–æ—Ä—é—î–º–æ mock –æ–±'—î–∫—Ç–∏
    mock_user = Mock(spec=User)
    mock_user.id = 6412868393
    mock_user.first_name = "Test"
    mock_user.username = "testuser"

    mock_chat = Mock(spec=Chat)
    mock_chat.id = 6412868393

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π CallbackQuery
    mock_callback_query = Mock(spec=CallbackQuery)
    mock_callback_query.id = "test_callback"
    mock_callback_query.data = "context_export"  # –¢–µ—Å—Ç—É—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç
    mock_callback_query.from_user = mock_user
    mock_callback_query.message = Mock()
    mock_callback_query.message.chat = mock_chat
    mock_callback_query.answer = AsyncMock()
    mock_callback_query.edit_message_text = AsyncMock()

    # –°—Ç–≤–æ—Ä—é—î–º–æ Update –∑ CallbackQuery
    mock_update = Mock(spec=Update)
    mock_update.callback_query = mock_callback_query
    mock_update.effective_user = mock_user
    mock_update.effective_chat = mock_chat
    mock_update.message = None  # –£ callback update –Ω–µ–º–∞—î message

    # –°—Ç–≤–æ—Ä—é—î–º–æ context –∑ bot_data
    mock_context = Mock()
    mock_context.bot_data = {}
    mock_context.user_data = {}

    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±—Ä–æ–±–∫—É –±–µ–∑ context_commands
    print("\nüìù –¢–µ—Å—Ç 1: callback –±–µ–∑ context_commands –≤ bot_data")
    try:
        await handle_callback_query(mock_update, mock_context)
        print("‚úÖ Callback –æ–±—Ä–æ–±–ª–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ answer()
        assert mock_callback_query.answer.called, "callback_query.answer() –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"
        print("‚úÖ callback_query.answer() –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
        if mock_callback_query.edit_message_text.called:
            call_args = mock_callback_query.edit_message_text.call_args
            message_text = call_args[0][0]
            if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in message_text.lower():
                print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å context_commands")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ 1: {e}")
        return False

    # –¢–µ—Å—Ç 2: –î–æ–¥–∞—î–º–æ context_commands –¥–æ bot_data
    print("\nüìù –¢–µ—Å—Ç 2: callback –∑ context_commands –≤ bot_data")

    # –°—Ç–≤–æ—Ä—é—î–º–æ mock –¥–ª—è storage —Ç–∞ context_memory
    mock_storage = Mock()
    mock_storage.context = Mock()
    mock_storage.context.get_context_stats = AsyncMock(return_value={
        'total_entries': 0,
        'sessions_count': 0,
        'first_entry': None,
        'last_entry': None,
        'high_importance': 0,
        'medium_importance': 0,
        'low_importance': 0
    })

    mock_context_memory = Mock()
    mock_context_memory.get_user_context = AsyncMock()
    mock_context_memory.get_user_context.return_value = Mock()
    mock_context_memory.get_user_context.return_value.last_updated = Mock()
    mock_context_memory.get_user_context.return_value.last_updated.strftime = Mock(return_value="2025-09-25 17:25")

    mock_context_memory.export_context = AsyncMock(return_value={
        "entries": [{"timestamp": "2025-09-25T17:25:00", "content": "test"}]
    })

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π ContextCommands
    context_commands = ContextCommands(mock_storage, mock_context_memory)

    # –î–æ–¥–∞—î–º–æ –¥–æ bot_data
    mock_context.bot_data["context_commands"] = context_commands
    mock_context.bot_data["approved_directory"] = "/tmp"

    # –°–∫–∏–¥–∞—î–º–æ mock'–∏
    mock_callback_query.answer.reset_mock()
    mock_callback_query.edit_message_text.reset_mock()

    try:
        await handle_callback_query(mock_update, mock_context)
        print("‚úÖ Callback –∑ context_commands –æ–±—Ä–æ–±–ª–µ–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ answer()
        assert mock_callback_query.answer.called, "callback_query.answer() –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"
        print("‚úÖ callback_query.answer() –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ context_commands –æ–±—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç
        if mock_update.message and hasattr(mock_update.message, 'reply_document'):
            print("‚úÖ context_export —Å–ø—Ä–∞—Ü—é–≤–∞–≤ (—Å–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç)")
        else:
            print("‚ÑπÔ∏è context_export –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ 2: {e}")
        import traceback
        traceback.print_exc()
        return False

    print(f"\nüéØ –í–ò–°–ù–û–í–û–ö:")
    print("–ú–µ—Ö–∞–Ω—ñ–∑–º –æ–±—Ä–æ–±–∫–∏ callback'—ñ–≤ –ø—Ä–∞—Ü—é—î –Ω–∞ —Ä—ñ–≤–Ω—ñ –∫–æ–¥—É.")
    print("–Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–µ–∞–≥—É—é—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–æ—Ç—ñ - –ø—Ä–æ–±–ª–µ–º–∞ –≤:")
    print("1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó context_commands –≤ bot_data")
    print("2. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó CallbackQueryHandler")
    print("3. –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∞—Ö middleware")

    return True

if __name__ == "__main__":
    asyncio.run(test_real_callback_handling())